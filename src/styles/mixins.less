@import "./mixins/normalize";

// gradient animation mixin
// takes start color, end color and transition time (set to .1s by default)
.gradient-animation(@start, @end, @transTime: .1s) {
	transition: opacity @transTime, box-shadow .05s;
	position: relative;
	background-size: 100%;
	background-image: linear-gradient(@start, @end);
	z-index: 0;

	&:before {
		background-image: linear-gradient(@end, @start);
		background-color: @color-white;
		border-radius: 3px;
		content: '';
		display: block;
		height: 100%;
		position: absolute;
		top: 0; left: 0;
		opacity: 0;
		width: 100%;
		z-index: -1;
		transition: opacity @transTime, box-shadow .05s;
		box-shadow: none;
	}

	&:hover:not(&-is-active) {
		&:before {
			opacity: 1;
		}
	}

	&:active { box-shadow: @shadow-inset;}

	&:focus {
		box-shadow: 0px 0px 0px 3px rgba(42,187,176,0.3);
	}

	&:focus::before {
		box-shadow: 0 0 5px @featured-color-primary;
		background: transparent;
		background-image: none;
		border-radius: 3px;
		box-sizing: border-box;
		opacity: 1;
	}
}

// gradient reset take a background if different than none
.gradient-reset(@background: none) {
	background: @background;

	&:before {
		content: '';
		display: none;
	}

	&:active {
		&::before {
			box-shadow: none;
		}
	}
}

// Creates a disabled element **uses `.gradient-reset()`**
// * `@name` is passed in to help name space the styles.
// * `@start-color` gradient start color if other than transparent.
// * `@end-color` gradient end color if other than transparent.
// * `@gradient` is the flow of the gradient.
.make-is-disabled(@name, @start-color: @color-transparent, @end-color: @color-transparent, @gradient: @standardGradient) {
	&.@{name}-is-disabled {
		.gradient-reset(linear-gradient(@gradient, @start-color, @end-color));
		&:hover {
			text-decoration: none;
		}
	}
}

.inset-box-shadow(@color: #000) {
	box-shadow: 0 3px 3px fade(@color, 5%) inset;
}

// Normalize box sizing
.box-sizing(@box-sizing: border-box) {
	box-sizing: @box-sizing;
}

// Defines a standard 30% opacity
.opacity(@opacity: .30) {
	opacity: @opacity;
}

.text-truncate() {
	overflow: hidden;
	text-overflow: ellipsis;
	white-space: nowrap;
}

// This helps prevent flickering on safari when using certain animations. See
// the following link for more info: http://stackoverflow.com/questions/3461441/prevent-flicker-on-webkit-transition-of-webkit-transform
.no-safari-flicker() {
	-webkit-transform:translate3d(0,0,0);
}

// Creates a drop shadow using a background gradient.
// * `@start` color at the top of the gradient
// * `@stop` color at end and fills the rest of the container
// * `@height` the height of the gradient
.dropshadow-gradient(@start, @stop, @height) {
	background-image: linear-gradient(@start 0, @stop @height);
}

// Create a border like line.  There are times that you may not want to set a
// border that is thicker than 2px because the way that borders intersect.
// This will use a background gradient to create a "border" within a container
// * `@direction` *'to bottom'* defines the side the "border" is on
// * `@line` *@color-primary* defines "border" color
// * `@background` *@color-white* defines the remainder fill color-primary
// * `@height` *3px* defines the thickness of the "border"
.hardstop-gradient(@direction: to bottom, @line: @color-primary, @background: @color-white, @height: 3px) {
	background-image: linear-gradient(@direction, @line 0, @line @height, @background @height);
}

// -----------------------------------------------------------------------------
// Transition group animations
// -----------------------------------------------------------------------------

// This set of mixins in intended to be used with ReactCSSTransitionGroup. It's
// important that you place this mixin directly underneath the parent that
// should be animating.

.transition-group-animation-fade(@timing: @timing-animation-fade) {
	&-enter {
		.opacity(0.01);
	}

	&-enter&-enter-active {
		.opacity(1);
		transition: opacity @timing ease-in;
	}

	&-leave {
		.opacity(1);
	}

	&-leave&-leave-active {
		.opacity(0.01);
		transition: opacity @timing ease-in;
	}
}
