// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SplitButton [common] example testing should match snapshot(s) for 1-basic 1`] = `
<DropMenu
  ContextMenu={
    Object {
      "alignment": "start",
      "direction": "down",
      "directonOffset": 0,
      "getAlignmentOffset": [Function],
      "isExpanded": true,
      "minWidthOffset": 0,
      "onClickOut": null,
      "portalId": null,
    }
  }
  alignment="start"
  className="lucid-SplitButton"
  direction="down"
  flyOutStyle={
    Object {
      "maxHeight": "18em",
    }
  }
  focusedIndex={null}
  isDisabled={false}
  isExpanded={false}
  onCollapse={[Function]}
  onExpand={[Function]}
  onFocusNext={[Function]}
  onFocusOption={[Function]}
  onFocusPrev={[Function]}
  onSelect={[Function]}
  optionContainerStyle={Object {}}
  portalId=""
  selectedIndices={Array []}
  style={
    Object {
      "height": 100,
      "marginRight": "20px",
    }
  }
>
  <DropMenu.Control>
    <ButtonGroup
      onSelect={[Function]}
      selectedIndices={Array []}
    >
      <Button
        className="lucid-SplitButton-Button-primary"
        hasOnlyIcon={false}
        isActive={false}
        isDisabled={false}
        onClick={[Function]}
        type="button"
      >
        Basic
      </Button>
      <Button
        className="lucid-SplitButton-Button-drop"
        hasOnlyIcon={true}
        isActive={false}
        isDisabled={false}
        onClick={[Function]}
        type="button"
      >
        <ChevronIcon
          aspectRatio="xMidYMid meet"
          className="lucid-SplitButton-ChevronIcon"
          color="primary"
          direction="down"
          isClickable={false}
          isDisabled={false}
          onClick={[Function]}
          onSelect={[Function]}
          size={10}
          viewBox="0 0 16 16"
        />
      </Button>
    </ButtonGroup>
  </DropMenu.Control>
  <DropMenu.Option
    isDisabled={false}
    isHidden={false}
    isWrapped={true}
    key="0"
  >
    One
  </DropMenu.Option>
  <DropMenu.Option
    isDisabled={false}
    isHidden={false}
    isWrapped={true}
    key="1"
  >
    Two
  </DropMenu.Option>
</DropMenu>
`;

exports[`SplitButton [common] example testing should match snapshot(s) for 1-basic 2`] = `
<DropMenu
  ContextMenu={
    Object {
      "alignment": "start",
      "direction": "down",
      "directonOffset": 0,
      "getAlignmentOffset": [Function],
      "isExpanded": true,
      "minWidthOffset": 0,
      "onClickOut": null,
      "portalId": null,
    }
  }
  alignment="start"
  className="lucid-SplitButton"
  direction="down"
  flyOutStyle={
    Object {
      "maxHeight": "18em",
    }
  }
  focusedIndex={null}
  isDisabled={false}
  isExpanded={false}
  onCollapse={[Function]}
  onExpand={[Function]}
  onFocusNext={[Function]}
  onFocusOption={[Function]}
  onFocusPrev={[Function]}
  onSelect={[Function]}
  optionContainerStyle={Object {}}
  portalId=""
  selectedIndices={Array []}
  style={
    Object {
      "height": 100,
      "marginRight": "20px",
    }
  }
>
  <DropMenu.Control>
    <ButtonGroup
      onSelect={[Function]}
      selectedIndices={Array []}
    >
      <Button
        className="lucid-SplitButton-Button-primary"
        hasOnlyIcon={false}
        isActive={false}
        isDisabled={false}
        kind="primary"
        onClick={[Function]}
        type="button"
      >
        Primary
      </Button>
      <Button
        className="lucid-SplitButton-Button-drop"
        hasOnlyIcon={true}
        isActive={false}
        isDisabled={false}
        kind="primary"
        onClick={[Function]}
        type="button"
      >
        <ChevronIcon
          aspectRatio="xMidYMid meet"
          className="lucid-SplitButton-ChevronIcon"
          color="primary"
          direction="down"
          isClickable={false}
          isDisabled={false}
          onClick={[Function]}
          onSelect={[Function]}
          size={10}
          viewBox="0 0 16 16"
        />
      </Button>
    </ButtonGroup>
  </DropMenu.Control>
  <DropMenu.Option
    isDisabled={false}
    isHidden={false}
    isWrapped={true}
    key="0"
  >
    One
  </DropMenu.Option>
  <DropMenu.Option
    isDisabled={false}
    isHidden={false}
    isWrapped={true}
    key="1"
  >
    Two
  </DropMenu.Option>
</DropMenu>
`;

exports[`SplitButton [common] example testing should match snapshot(s) for 2-disabled 1`] = `
<DropMenu
  ContextMenu={
    Object {
      "alignment": "start",
      "direction": "down",
      "directonOffset": 0,
      "getAlignmentOffset": [Function],
      "isExpanded": true,
      "minWidthOffset": 0,
      "onClickOut": null,
      "portalId": null,
    }
  }
  alignment="start"
  className="lucid-SplitButton"
  direction="down"
  flyOutStyle={
    Object {
      "maxHeight": "18em",
    }
  }
  focusedIndex={null}
  isDisabled={false}
  isExpanded={false}
  onCollapse={[Function]}
  onExpand={[Function]}
  onFocusNext={[Function]}
  onFocusOption={[Function]}
  onFocusPrev={[Function]}
  onSelect={[Function]}
  optionContainerStyle={Object {}}
  portalId=""
  selectedIndices={Array []}
>
  <DropMenu.Control>
    <ButtonGroup
      onSelect={[Function]}
      selectedIndices={Array []}
    >
      <Button
        className="lucid-SplitButton-Button-primary"
        hasOnlyIcon={false}
        isActive={false}
        isDisabled={true}
        onClick={[Function]}
        type="button"
      >
        Save
      </Button>
      <Button
        className="lucid-SplitButton-Button-drop"
        hasOnlyIcon={true}
        isActive={false}
        isDisabled={false}
        onClick={[Function]}
        type="button"
      >
        <ChevronIcon
          aspectRatio="xMidYMid meet"
          className="lucid-SplitButton-ChevronIcon"
          color="primary"
          direction="down"
          isClickable={false}
          isDisabled={false}
          onClick={[Function]}
          onSelect={[Function]}
          size={10}
          viewBox="0 0 16 16"
        />
      </Button>
    </ButtonGroup>
  </DropMenu.Control>
  <DropMenu.Option
    isDisabled={true}
    isHidden={false}
    isWrapped={true}
    key="0"
  >
    This action should be disabled
  </DropMenu.Option>
  <DropMenu.Option
    isDisabled={false}
    isHidden={false}
    isWrapped={true}
    key="1"
  >
    This one should be enabled
  </DropMenu.Option>
  <DropMenu.Option
    isDisabled={true}
    isHidden={false}
    isWrapped={true}
    key="2"
  >
    This should be disabled, too
  </DropMenu.Option>
</DropMenu>
`;

exports[`SplitButton [common] example testing should match snapshot(s) for 3-up 1`] = `
<DropMenu
  ContextMenu={
    Object {
      "alignment": "start",
      "direction": "down",
      "directonOffset": 0,
      "getAlignmentOffset": [Function],
      "isExpanded": true,
      "minWidthOffset": 0,
      "onClickOut": null,
      "portalId": null,
    }
  }
  alignment="start"
  className="lucid-SplitButton"
  direction="up"
  flyOutStyle={
    Object {
      "maxHeight": "18em",
    }
  }
  focusedIndex={null}
  isDisabled={false}
  isExpanded={false}
  onCollapse={[Function]}
  onExpand={[Function]}
  onFocusNext={[Function]}
  onFocusOption={[Function]}
  onFocusPrev={[Function]}
  onSelect={[Function]}
  optionContainerStyle={Object {}}
  portalId=""
  selectedIndices={Array []}
>
  <DropMenu.Control>
    <ButtonGroup
      onSelect={[Function]}
      selectedIndices={Array []}
    >
      <Button
        className="lucid-SplitButton-Button-primary"
        hasOnlyIcon={false}
        isActive={false}
        isDisabled={false}
        kind="primary"
        onClick={[Function]}
        type="button"
      >
        Save
      </Button>
      <Button
        className="lucid-SplitButton-Button-drop"
        hasOnlyIcon={true}
        isActive={false}
        isDisabled={false}
        kind="primary"
        onClick={[Function]}
        type="button"
      >
        <ChevronIcon
          aspectRatio="xMidYMid meet"
          className="lucid-SplitButton-ChevronIcon"
          color="primary"
          direction="up"
          isClickable={false}
          isDisabled={false}
          onClick={[Function]}
          onSelect={[Function]}
          size={10}
          viewBox="0 0 16 16"
        />
      </Button>
    </ButtonGroup>
  </DropMenu.Control>
  <DropMenu.Option
    isDisabled={false}
    isHidden={false}
    isWrapped={true}
    key="0"
  >
    Action 01
  </DropMenu.Option>
  <DropMenu.Option
    isDisabled={false}
    isHidden={false}
    isWrapped={true}
    key="1"
  >
    Here's Another Action
  </DropMenu.Option>
  <DropMenu.Option
    isDisabled={false}
    isHidden={false}
    isWrapped={true}
    key="2"
  >
    And Another Action
  </DropMenu.Option>
</DropMenu>
`;

exports[`SplitButton [common] example testing should match snapshot(s) for 4-sizes 1`] = `
<DropMenu
  ContextMenu={
    Object {
      "alignment": "start",
      "direction": "down",
      "directonOffset": 0,
      "getAlignmentOffset": [Function],
      "isExpanded": true,
      "minWidthOffset": 0,
      "onClickOut": null,
      "portalId": null,
    }
  }
  alignment="start"
  className="lucid-SplitButton"
  direction="down"
  flyOutStyle={
    Object {
      "maxHeight": "18em",
    }
  }
  focusedIndex={null}
  isDisabled={false}
  isExpanded={false}
  onCollapse={[Function]}
  onExpand={[Function]}
  onFocusNext={[Function]}
  onFocusOption={[Function]}
  onFocusPrev={[Function]}
  onSelect={[Function]}
  optionContainerStyle={Object {}}
  portalId=""
  selectedIndices={Array []}
  style={
    Object {
      "height": 100,
      "marginRight": "20px",
    }
  }
>
  <DropMenu.Control>
    <ButtonGroup
      onSelect={[Function]}
      selectedIndices={Array []}
    >
      <Button
        className="lucid-SplitButton-Button-primary"
        hasOnlyIcon={false}
        isActive={false}
        isDisabled={false}
        onClick={[Function]}
        size="large"
        type="button"
      >
        Large
      </Button>
      <Button
        className="lucid-SplitButton-Button-drop"
        hasOnlyIcon={true}
        isActive={false}
        isDisabled={false}
        onClick={[Function]}
        size="large"
        type="button"
      >
        <ChevronIcon
          aspectRatio="xMidYMid meet"
          className="lucid-SplitButton-ChevronIcon"
          color="primary"
          direction="down"
          isClickable={false}
          isDisabled={false}
          onClick={[Function]}
          onSelect={[Function]}
          size={10}
          viewBox="0 0 16 16"
        />
      </Button>
    </ButtonGroup>
  </DropMenu.Control>
  <DropMenu.Option
    isDisabled={false}
    isHidden={false}
    isWrapped={true}
    key="0"
  >
    One
  </DropMenu.Option>
  <DropMenu.Option
    isDisabled={false}
    isHidden={false}
    isWrapped={true}
    key="1"
  >
    Two
  </DropMenu.Option>
</DropMenu>
`;

exports[`SplitButton [common] example testing should match snapshot(s) for 4-sizes 2`] = `
<DropMenu
  ContextMenu={
    Object {
      "alignment": "start",
      "direction": "down",
      "directonOffset": 0,
      "getAlignmentOffset": [Function],
      "isExpanded": true,
      "minWidthOffset": 0,
      "onClickOut": null,
      "portalId": null,
    }
  }
  alignment="start"
  className="lucid-SplitButton"
  direction="down"
  flyOutStyle={
    Object {
      "maxHeight": "18em",
    }
  }
  focusedIndex={null}
  isDisabled={false}
  isExpanded={false}
  onCollapse={[Function]}
  onExpand={[Function]}
  onFocusNext={[Function]}
  onFocusOption={[Function]}
  onFocusPrev={[Function]}
  onSelect={[Function]}
  optionContainerStyle={Object {}}
  portalId=""
  selectedIndices={Array []}
  style={
    Object {
      "height": 100,
      "marginRight": "20px",
    }
  }
>
  <DropMenu.Control>
    <ButtonGroup
      onSelect={[Function]}
      selectedIndices={Array []}
    >
      <Button
        className="lucid-SplitButton-Button-primary"
        hasOnlyIcon={false}
        isActive={false}
        isDisabled={false}
        onClick={[Function]}
        size="small"
        type="button"
      >
        Small
      </Button>
      <Button
        className="lucid-SplitButton-Button-drop"
        hasOnlyIcon={true}
        isActive={false}
        isDisabled={false}
        onClick={[Function]}
        size="small"
        type="button"
      >
        <ChevronIcon
          aspectRatio="xMidYMid meet"
          className="lucid-SplitButton-ChevronIcon"
          color="primary"
          direction="down"
          isClickable={false}
          isDisabled={false}
          onClick={[Function]}
          onSelect={[Function]}
          size={10}
          viewBox="0 0 16 16"
        />
      </Button>
    </ButtonGroup>
  </DropMenu.Control>
  <DropMenu.Option
    isDisabled={false}
    isHidden={false}
    isWrapped={true}
    key="0"
  >
    One
  </DropMenu.Option>
  <DropMenu.Option
    isDisabled={false}
    isHidden={false}
    isWrapped={true}
    key="1"
  >
    Two
  </DropMenu.Option>
</DropMenu>
`;

exports[`SplitButton [common] example testing should match snapshot(s) for 4-sizes 3`] = `
<DropMenu
  ContextMenu={
    Object {
      "alignment": "start",
      "direction": "down",
      "directonOffset": 0,
      "getAlignmentOffset": [Function],
      "isExpanded": true,
      "minWidthOffset": 0,
      "onClickOut": null,
      "portalId": null,
    }
  }
  alignment="start"
  className="lucid-SplitButton"
  direction="down"
  flyOutStyle={
    Object {
      "maxHeight": "18em",
    }
  }
  focusedIndex={null}
  isDisabled={false}
  isExpanded={false}
  onCollapse={[Function]}
  onExpand={[Function]}
  onFocusNext={[Function]}
  onFocusOption={[Function]}
  onFocusPrev={[Function]}
  onSelect={[Function]}
  optionContainerStyle={Object {}}
  portalId=""
  selectedIndices={Array []}
  style={
    Object {
      "height": 100,
      "marginRight": "20px",
    }
  }
>
  <DropMenu.Control>
    <ButtonGroup
      onSelect={[Function]}
      selectedIndices={Array []}
    >
      <Button
        className="lucid-SplitButton-Button-primary"
        hasOnlyIcon={false}
        isActive={false}
        isDisabled={false}
        onClick={[Function]}
        size="short"
        type="button"
      >
        Short
      </Button>
      <Button
        className="lucid-SplitButton-Button-drop"
        hasOnlyIcon={true}
        isActive={false}
        isDisabled={false}
        onClick={[Function]}
        size="short"
        type="button"
      >
        <ChevronIcon
          aspectRatio="xMidYMid meet"
          className="lucid-SplitButton-ChevronIcon"
          color="primary"
          direction="down"
          isClickable={false}
          isDisabled={false}
          onClick={[Function]}
          onSelect={[Function]}
          size={10}
          viewBox="0 0 16 16"
        />
      </Button>
    </ButtonGroup>
  </DropMenu.Control>
  <DropMenu.Option
    isDisabled={false}
    isHidden={false}
    isWrapped={true}
    key="0"
  >
    One
  </DropMenu.Option>
  <DropMenu.Option
    isDisabled={false}
    isHidden={false}
    isWrapped={true}
    key="1"
  >
    Two
  </DropMenu.Option>
</DropMenu>
`;

exports[`SplitButton click handlers primary button should trigger \`handleClick\` 1`] = `
Object {
  "event": Object {
    "stopPropagation": [MockFunction] {
      "calls": Array [
        Array [],
      ],
      "results": Array [
        Object {
          "type": "return",
          "value": undefined,
        },
      ],
    },
  },
  "props": Object {
    "onClick": [MockFunction] {
      "calls": Array [
        Array [
          [Circular],
        ],
      ],
      "results": Array [
        Object {
          "type": "return",
          "value": undefined,
        },
      ],
    },
  },
}
`;

exports[`SplitButton click handlers secondary buttons should call the click handler for the second button when it is selected 1`] = `
Object {
  "event": Object {},
  "props": Object {
    "onClick": [MockFunction] {
      "calls": Array [
        Array [
          [Circular],
        ],
      ],
      "results": Array [
        Object {
          "type": "return",
          "value": undefined,
        },
      ],
    },
  },
}
`;

exports[`SplitButton click handlers secondary buttons should call the click handler for the third button when it is selected 1`] = `
Object {
  "event": Object {},
  "props": Object {
    "onClick": [MockFunction] {
      "calls": Array [
        Array [
          [Circular],
        ],
      ],
      "results": Array [
        Object {
          "type": "return",
          "value": undefined,
        },
      ],
    },
  },
}
`;
