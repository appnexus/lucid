// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`LineChart [common] example testing should match snapshot(s) for 01.basic 1`] = `
<svg
  className="lucid-LineChart"
  height={400}
  width={1000}
>
  <g
    transform="translate(80, 10)"
  />
  <g
    transform="translate(80, 335)"
  >
    <Axis
      innerTickSize={6}
      orient="bottom"
      outerTickSize={0}
      scale={[Function]}
      textOrientation="horizontal"
      tickCount={null}
      tickFormat={[Function]}
      tickPadding={3}
    />
  </g>
  <g
    transform="translate(80, 10)"
  >
    <Axis
      innerTickSize={6}
      orient="left"
      outerTickSize={6}
      scale={[Function]}
      textOrientation="horizontal"
      tickCount={null}
      tickFormat={[Function]}
      tickPadding={3}
    />
  </g>
  <g
    transform="translate(80, 10)"
  >
    <Lines
      colorOffset={0}
      data={
        Array [
          Object {
            "x": 2015-01-01T08:00:00.000Z,
            "y": 1,
          },
          Object {
            "x": 2015-01-02T08:00:00.000Z,
            "y": 0,
          },
          Object {
            "x": 2015-01-03T08:00:00.000Z,
            "y": 3,
          },
          Object {
            "x": 2015-01-04T08:00:00.000Z,
            "y": 5,
          },
        ]
      }
      isStacked={false}
      palette={
        Array [
          "color-chart-0",
          "color-chart-1",
          "color-chart-2",
          "color-chart-3",
          "color-chart-4",
          "color-chart-5",
        ]
      }
      xField="x"
      xScale={[Function]}
      yFields={
        Array [
          "y",
        ]
      }
      yScale={[Function]}
      yStackedMax={5}
    />
  </g>
  <g
    transform="translate(80, 10)"
  >
    <Points
      colorOffset={0}
      data={
        Array [
          Object {
            "x": 2015-01-01T08:00:00.000Z,
            "y": 1,
          },
          Object {
            "x": 2015-01-02T08:00:00.000Z,
            "y": 0,
          },
          Object {
            "x": 2015-01-03T08:00:00.000Z,
            "y": 3,
          },
          Object {
            "x": 2015-01-04T08:00:00.000Z,
            "y": 5,
          },
        ]
      }
      hasStroke={true}
      isStacked={false}
      palette={
        Array [
          "color-chart-0",
          "color-chart-1",
          "color-chart-2",
          "color-chart-3",
          "color-chart-4",
          "color-chart-5",
        ]
      }
      xField="x"
      xScale={[Function]}
      yFields={
        Array [
          "y",
        ]
      }
      yScale={[Function]}
      yStackedMax={5}
    />
  </g>
  <g
    transform="translate(80, 10)"
  >
    <rect
      className="lucid-LineChart-invisible"
      height={325}
      onMouseMove={[Function]}
      onMouseOut={[Function]}
      width={840}
    />
  </g>
</svg>
`;

exports[`LineChart [common] example testing should match snapshot(s) for 03.multi 1`] = `
<svg
  className="lucid-LineChart"
  height={400}
  width={1000}
>
  <g
    transform="translate(80, 10)"
  />
  <g
    transform="translate(80, 335)"
  >
    <Axis
      innerTickSize={6}
      orient="bottom"
      outerTickSize={0}
      scale={[Function]}
      textOrientation="horizontal"
      tickCount={null}
      tickFormat={[Function]}
      tickPadding={3}
    />
  </g>
  <g
    transform="translate(80, 10)"
  >
    <Axis
      innerTickSize={6}
      orient="left"
      outerTickSize={6}
      scale={[Function]}
      textOrientation="horizontal"
      tickCount={null}
      tickFormat={[Function]}
      tickPadding={3}
    />
  </g>
  <g
    transform="translate(0, 10)"
  >
    <AxisLabel
      color="#000"
      height={325}
      label="Fruit Count"
      orient="left"
      width={80}
    />
  </g>
  <g
    transform="translate(80, 10)"
  >
    <Lines
      colorOffset={0}
      data={
        Array [
          Object {
            "apples": 184,
            "oranges": 142,
            "pears": 117,
            "x": 2015-01-01T08:00:00.000Z,
          },
          Object {
            "apples": 191,
            "oranges": 145,
            "pears": 118,
            "x": 2015-01-02T08:00:00.000Z,
          },
          Object {
            "apples": 114,
            "oranges": 107,
            "pears": 103,
            "x": 2015-01-03T08:00:00.000Z,
          },
          Object {
            "apples": 24,
            "oranges": 62,
            "pears": 85,
            "x": 2015-01-04T08:00:00.000Z,
          },
          Object {
            "apples": 4,
            "oranges": 52,
            "pears": 81,
            "x": 2015-01-05T08:00:00.000Z,
          },
          Object {
            "apples": 72,
            "oranges": 86,
            "pears": 94,
            "x": 2015-01-06T08:00:00.000Z,
          },
          Object {
            "apples": 166,
            "oranges": 133,
            "pears": 113,
            "x": 2015-01-07T08:00:00.000Z,
          },
          Object {
            "apples": 199,
            "oranges": 149,
            "pears": 120,
            "x": 2015-01-08T08:00:00.000Z,
          },
          Object {
            "apples": 141,
            "oranges": 121,
            "pears": 108,
            "x": 2015-01-09T08:00:00.000Z,
          },
          Object {
            "apples": 46,
            "oranges": 73,
            "pears": 89,
            "x": 2015-01-10T08:00:00.000Z,
          },
          Object {
            "apples": 0,
            "oranges": 50,
            "pears": 80,
            "x": 2015-01-11T08:00:00.000Z,
          },
          Object {
            "apples": 46,
            "oranges": 73,
            "pears": 89,
            "x": 2015-01-12T08:00:00.000Z,
          },
          Object {
            "apples": 142,
            "oranges": 121,
            "pears": 108,
            "x": 2015-01-13T08:00:00.000Z,
          },
          Object {
            "apples": 199,
            "oranges": 150,
            "pears": 120,
            "x": 2015-01-14T08:00:00.000Z,
          },
          Object {
            "apples": 165,
            "oranges": 133,
            "pears": 113,
            "x": 2015-01-15T08:00:00.000Z,
          },
          Object {
            "apples": 71,
            "oranges": 86,
            "pears": 94,
            "x": 2015-01-16T08:00:00.000Z,
          },
          Object {
            "apples": 4,
            "oranges": 52,
            "pears": 81,
            "x": 2015-01-17T08:00:00.000Z,
          },
          Object {
            "apples": 25,
            "oranges": 62,
            "pears": 85,
            "x": 2015-01-18T08:00:00.000Z,
          },
          Object {
            "apples": 115,
            "oranges": 107,
            "pears": 103,
            "x": 2015-01-19T08:00:00.000Z,
          },
          Object {
            "apples": 191,
            "oranges": 146,
            "pears": 118,
            "x": 2015-01-20T08:00:00.000Z,
          },
          Object {
            "apples": 184,
            "oranges": 142,
            "pears": 117,
            "x": 2015-01-21T08:00:00.000Z,
          },
          Object {
            "apples": 99,
            "oranges": 100,
            "pears": 100,
            "x": 2015-01-22T08:00:00.000Z,
          },
          Object {
            "apples": 15,
            "oranges": 58,
            "pears": 83,
            "x": 2015-01-23T08:00:00.000Z,
          },
          Object {
            "apples": 9,
            "oranges": 55,
            "pears": 82,
            "x": 2015-01-24T08:00:00.000Z,
          },
          Object {
            "apples": 87,
            "oranges": 93,
            "pears": 97,
            "x": 2015-01-25T08:00:00.000Z,
          },
          Object {
            "apples": 176,
            "oranges": 138,
            "pears": 115,
            "x": 2015-01-26T08:00:00.000Z,
          },
          Object {
            "apples": 196,
            "oranges": 148,
            "pears": 119,
            "x": 2015-01-27T08:00:00.000Z,
          },
          Object {
            "apples": 127,
            "oranges": 114,
            "pears": 105,
            "x": 2015-01-28T08:00:00.000Z,
          },
          Object {
            "apples": 3,
            "oranges": 67,
            "pears": 87,
            "x": 2015-01-29T08:00:00.000Z,
          },
        ]
      }
      isStacked={false}
      palette={
        Array [
          "color-chart-0",
          "color-chart-1",
          "color-chart-2",
          "color-chart-3",
          "color-chart-4",
          "color-chart-5",
        ]
      }
      xField="x"
      xScale={[Function]}
      yFields={
        Array [
          "apples",
          "oranges",
          "pears",
        ]
      }
      yScale={[Function]}
      yStackedMax={199}
    />
  </g>
  <g
    transform="translate(80, 10)"
  >
    <Points
      colorOffset={0}
      data={
        Array [
          Object {
            "apples": 184,
            "oranges": 142,
            "pears": 117,
            "x": 2015-01-01T08:00:00.000Z,
          },
          Object {
            "apples": 191,
            "oranges": 145,
            "pears": 118,
            "x": 2015-01-02T08:00:00.000Z,
          },
          Object {
            "apples": 114,
            "oranges": 107,
            "pears": 103,
            "x": 2015-01-03T08:00:00.000Z,
          },
          Object {
            "apples": 24,
            "oranges": 62,
            "pears": 85,
            "x": 2015-01-04T08:00:00.000Z,
          },
          Object {
            "apples": 4,
            "oranges": 52,
            "pears": 81,
            "x": 2015-01-05T08:00:00.000Z,
          },
          Object {
            "apples": 72,
            "oranges": 86,
            "pears": 94,
            "x": 2015-01-06T08:00:00.000Z,
          },
          Object {
            "apples": 166,
            "oranges": 133,
            "pears": 113,
            "x": 2015-01-07T08:00:00.000Z,
          },
          Object {
            "apples": 199,
            "oranges": 149,
            "pears": 120,
            "x": 2015-01-08T08:00:00.000Z,
          },
          Object {
            "apples": 141,
            "oranges": 121,
            "pears": 108,
            "x": 2015-01-09T08:00:00.000Z,
          },
          Object {
            "apples": 46,
            "oranges": 73,
            "pears": 89,
            "x": 2015-01-10T08:00:00.000Z,
          },
          Object {
            "apples": 0,
            "oranges": 50,
            "pears": 80,
            "x": 2015-01-11T08:00:00.000Z,
          },
          Object {
            "apples": 46,
            "oranges": 73,
            "pears": 89,
            "x": 2015-01-12T08:00:00.000Z,
          },
          Object {
            "apples": 142,
            "oranges": 121,
            "pears": 108,
            "x": 2015-01-13T08:00:00.000Z,
          },
          Object {
            "apples": 199,
            "oranges": 150,
            "pears": 120,
            "x": 2015-01-14T08:00:00.000Z,
          },
          Object {
            "apples": 165,
            "oranges": 133,
            "pears": 113,
            "x": 2015-01-15T08:00:00.000Z,
          },
          Object {
            "apples": 71,
            "oranges": 86,
            "pears": 94,
            "x": 2015-01-16T08:00:00.000Z,
          },
          Object {
            "apples": 4,
            "oranges": 52,
            "pears": 81,
            "x": 2015-01-17T08:00:00.000Z,
          },
          Object {
            "apples": 25,
            "oranges": 62,
            "pears": 85,
            "x": 2015-01-18T08:00:00.000Z,
          },
          Object {
            "apples": 115,
            "oranges": 107,
            "pears": 103,
            "x": 2015-01-19T08:00:00.000Z,
          },
          Object {
            "apples": 191,
            "oranges": 146,
            "pears": 118,
            "x": 2015-01-20T08:00:00.000Z,
          },
          Object {
            "apples": 184,
            "oranges": 142,
            "pears": 117,
            "x": 2015-01-21T08:00:00.000Z,
          },
          Object {
            "apples": 99,
            "oranges": 100,
            "pears": 100,
            "x": 2015-01-22T08:00:00.000Z,
          },
          Object {
            "apples": 15,
            "oranges": 58,
            "pears": 83,
            "x": 2015-01-23T08:00:00.000Z,
          },
          Object {
            "apples": 9,
            "oranges": 55,
            "pears": 82,
            "x": 2015-01-24T08:00:00.000Z,
          },
          Object {
            "apples": 87,
            "oranges": 93,
            "pears": 97,
            "x": 2015-01-25T08:00:00.000Z,
          },
          Object {
            "apples": 176,
            "oranges": 138,
            "pears": 115,
            "x": 2015-01-26T08:00:00.000Z,
          },
          Object {
            "apples": 196,
            "oranges": 148,
            "pears": 119,
            "x": 2015-01-27T08:00:00.000Z,
          },
          Object {
            "apples": 127,
            "oranges": 114,
            "pears": 105,
            "x": 2015-01-28T08:00:00.000Z,
          },
          Object {
            "apples": 3,
            "oranges": 67,
            "pears": 87,
            "x": 2015-01-29T08:00:00.000Z,
          },
        ]
      }
      hasStroke={true}
      isStacked={false}
      palette={
        Array [
          "color-chart-0",
          "color-chart-1",
          "color-chart-2",
          "color-chart-3",
          "color-chart-4",
          "color-chart-5",
        ]
      }
      xField="x"
      xScale={[Function]}
      yFields={
        Array [
          "apples",
          "oranges",
          "pears",
        ]
      }
      yScale={[Function]}
      yStackedMax={199}
    />
  </g>
  <g
    transform="translate(80, 10)"
  >
    <rect
      className="lucid-LineChart-invisible"
      height={325}
      onMouseMove={[Function]}
      onMouseOut={[Function]}
      width={840}
    />
  </g>
</svg>
`;

exports[`LineChart [common] example testing should match snapshot(s) for 04.multi-with-legend 1`] = `
<svg
  className="lucid-LineChart"
  height={400}
  width={1000}
>
  <g
    transform="translate(80, 10)"
  />
  <g
    transform="translate(80, 335)"
  >
    <Axis
      innerTickSize={6}
      orient="bottom"
      outerTickSize={0}
      scale={[Function]}
      textOrientation="horizontal"
      tickCount={null}
      tickFormat={[Function]}
      tickPadding={3}
    />
  </g>
  <g
    transform="translate(80, 10)"
  >
    <Axis
      innerTickSize={6}
      orient="left"
      outerTickSize={6}
      scale={[Function]}
      textOrientation="horizontal"
      tickCount={null}
      tickFormat={[Function]}
      tickPadding={3}
    />
  </g>
  <g
    transform="translate(0, 10)"
  >
    <AxisLabel
      color="#000"
      height={325}
      label="Fruit Count"
      orient="left"
      width={80}
    />
  </g>
  <g
    transform="translate(80, 10)"
  >
    <Lines
      colorOffset={0}
      data={
        Array [
          Object {
            "apples": 2,
            "oranges": 3,
            "pears": 1,
            "x": 2015-01-01T08:00:00.000Z,
          },
          Object {
            "apples": 2,
            "oranges": 5,
            "pears": 6,
            "x": 2015-01-02T08:00:00.000Z,
          },
          Object {
            "apples": 3,
            "oranges": 2,
            "pears": 4,
            "x": 2015-01-03T08:00:00.000Z,
          },
          Object {
            "apples": 5,
            "oranges": 6,
            "pears": 1,
            "x": 2015-01-04T08:00:00.000Z,
          },
        ]
      }
      isStacked={false}
      palette={
        Array [
          "color-chart-2-lightest",
          "color-chart-2-light",
          "color-chart-2",
          "color-chart-2-dark",
          "color-chart-2-darkest",
        ]
      }
      xField="x"
      xScale={[Function]}
      yFields={
        Array [
          "apples",
          "oranges",
          "pears",
        ]
      }
      yScale={[Function]}
      yStackedMax={6}
    />
  </g>
  <g
    transform="translate(80, 10)"
  >
    <Points
      colorOffset={0}
      data={
        Array [
          Object {
            "apples": 2,
            "oranges": 3,
            "pears": 1,
            "x": 2015-01-01T08:00:00.000Z,
          },
          Object {
            "apples": 2,
            "oranges": 5,
            "pears": 6,
            "x": 2015-01-02T08:00:00.000Z,
          },
          Object {
            "apples": 3,
            "oranges": 2,
            "pears": 4,
            "x": 2015-01-03T08:00:00.000Z,
          },
          Object {
            "apples": 5,
            "oranges": 6,
            "pears": 1,
            "x": 2015-01-04T08:00:00.000Z,
          },
        ]
      }
      hasStroke={true}
      isStacked={false}
      palette={
        Array [
          "color-chart-2-lightest",
          "color-chart-2-light",
          "color-chart-2",
          "color-chart-2-dark",
          "color-chart-2-darkest",
        ]
      }
      xField="x"
      xScale={[Function]}
      yFields={
        Array [
          "apples",
          "oranges",
          "pears",
        ]
      }
      yScale={[Function]}
      yStackedMax={6}
    />
  </g>
  <g
    transform="translate(80, 10)"
  >
    <rect
      className="lucid-LineChart-invisible"
      height={325}
      onMouseMove={[Function]}
      onMouseOut={[Function]}
      width={840}
    />
  </g>
</svg>
`;

exports[`LineChart [common] example testing should match snapshot(s) for 05.stacked 1`] = `
<svg
  className="lucid-LineChart"
  height={400}
  width={1000}
>
  <g
    transform="translate(80, 10)"
  />
  <g
    transform="translate(80, 335)"
  >
    <Axis
      innerTickSize={6}
      orient="bottom"
      outerTickSize={0}
      scale={[Function]}
      textOrientation="horizontal"
      tickCount={null}
      tickFormat={[Function]}
      tickPadding={3}
    />
  </g>
  <g
    transform="translate(80, 10)"
  >
    <Axis
      innerTickSize={6}
      orient="left"
      outerTickSize={6}
      scale={[Function]}
      textOrientation="horizontal"
      tickCount={null}
      tickFormat={[Function]}
      tickPadding={3}
    />
  </g>
  <g
    transform="translate(0, 10)"
  >
    <AxisLabel
      color="#000"
      height={325}
      label="Fruit Count"
      orient="left"
      width={80}
    />
  </g>
  <g
    transform="translate(80, 10)"
  >
    <Lines
      colorOffset={0}
      data={
        Array [
          Object {
            "apples": 2,
            "bananas": 7,
            "cherries": 3,
            "kiwis": 5,
            "oranges": 3,
            "pears": 1,
            "x": 2015-01-01T08:00:00.000Z,
          },
          Object {
            "apples": 2,
            "bananas": 7,
            "cherries": 5,
            "kiwis": 5,
            "oranges": 5,
            "pears": 6,
            "x": 2015-01-02T08:00:00.000Z,
          },
          Object {
            "apples": 3,
            "bananas": 7,
            "cherries": 2,
            "kiwis": 5,
            "oranges": 2,
            "pears": 4,
            "x": 2015-01-03T08:00:00.000Z,
          },
          Object {
            "apples": 5,
            "bananas": 7,
            "cherries": 1,
            "kiwis": 5,
            "oranges": 6,
            "pears": 1,
            "x": 2015-01-04T08:00:00.000Z,
          },
          Object {
            "apples": 4,
            "bananas": 7,
            "cherries": 3,
            "kiwis": 5,
            "oranges": 3,
            "pears": 2,
            "x": 2015-01-05T08:00:00.000Z,
          },
          Object {
            "apples": 3,
            "bananas": 7,
            "cherries": 5,
            "kiwis": 5,
            "oranges": 4,
            "pears": 4,
            "x": 2015-01-06T08:00:00.000Z,
          },
        ]
      }
      isStacked={true}
      palette={
        Array [
          "color-chart-0",
          "color-chart-1",
          "color-chart-2",
          "color-chart-3",
          "color-chart-4",
          "color-chart-5",
        ]
      }
      xField="x"
      xScale={[Function]}
      yFields={
        Array [
          "apples",
          "oranges",
          "pears",
          "bananas",
          "kiwis",
          "cherries",
        ]
      }
      yScale={[Function]}
      yStackedMax={30}
    />
  </g>
  <g
    transform="translate(80, 10)"
  >
    <Points
      colorOffset={0}
      data={
        Array [
          Object {
            "apples": 2,
            "bananas": 7,
            "cherries": 3,
            "kiwis": 5,
            "oranges": 3,
            "pears": 1,
            "x": 2015-01-01T08:00:00.000Z,
          },
          Object {
            "apples": 2,
            "bananas": 7,
            "cherries": 5,
            "kiwis": 5,
            "oranges": 5,
            "pears": 6,
            "x": 2015-01-02T08:00:00.000Z,
          },
          Object {
            "apples": 3,
            "bananas": 7,
            "cherries": 2,
            "kiwis": 5,
            "oranges": 2,
            "pears": 4,
            "x": 2015-01-03T08:00:00.000Z,
          },
          Object {
            "apples": 5,
            "bananas": 7,
            "cherries": 1,
            "kiwis": 5,
            "oranges": 6,
            "pears": 1,
            "x": 2015-01-04T08:00:00.000Z,
          },
          Object {
            "apples": 4,
            "bananas": 7,
            "cherries": 3,
            "kiwis": 5,
            "oranges": 3,
            "pears": 2,
            "x": 2015-01-05T08:00:00.000Z,
          },
          Object {
            "apples": 3,
            "bananas": 7,
            "cherries": 5,
            "kiwis": 5,
            "oranges": 4,
            "pears": 4,
            "x": 2015-01-06T08:00:00.000Z,
          },
        ]
      }
      hasStroke={true}
      isStacked={true}
      palette={
        Array [
          "color-chart-0",
          "color-chart-1",
          "color-chart-2",
          "color-chart-3",
          "color-chart-4",
          "color-chart-5",
        ]
      }
      xField="x"
      xScale={[Function]}
      yFields={
        Array [
          "apples",
          "oranges",
          "pears",
          "bananas",
          "kiwis",
          "cherries",
        ]
      }
      yScale={[Function]}
      yStackedMax={30}
    />
  </g>
  <g
    transform="translate(80, 10)"
  >
    <rect
      className="lucid-LineChart-invisible"
      height={325}
      onMouseMove={[Function]}
      onMouseOut={[Function]}
      width={840}
    />
  </g>
</svg>
`;

exports[`LineChart [common] example testing should match snapshot(s) for 06.dual-axis 1`] = `
<svg
  className="lucid-LineChart"
  height={400}
  width={1000}
>
  <g
    transform="translate(80, 10)"
  />
  <g
    transform="translate(80, 335)"
  >
    <Axis
      innerTickSize={6}
      orient="bottom"
      outerTickSize={0}
      scale={[Function]}
      textOrientation="horizontal"
      tickCount={null}
      tickFormat={[Function]}
      tickPadding={3}
    />
  </g>
  <g
    transform="translate(80, 10)"
  >
    <Axis
      innerTickSize={6}
      orient="left"
      outerTickSize={6}
      scale={[Function]}
      textOrientation="horizontal"
      tickCount={null}
      tickFormat={[Function]}
      tickPadding={3}
    />
  </g>
  <g
    transform="translate(0, 10)"
  >
    <AxisLabel
      color="color-chart-4"
      height={325}
      label="Number of Bananas"
      orient="left"
      width={80}
    />
  </g>
  <g
    transform="translate(920, 10)"
  >
    <Axis
      innerTickSize={6}
      orient="right"
      outerTickSize={6}
      scale={[Function]}
      textOrientation="horizontal"
      tickCount={null}
      tickFormat={[Function]}
      tickPadding={3}
    />
  </g>
  <g
    transform="translate(920, 10)"
  >
    <AxisLabel
      color="color-chart-2"
      height={325}
      label="Number of Cherries"
      orient="right"
      width={80}
    />
  </g>
  <g
    transform="translate(80, 10)"
  >
    <Lines
      colorMap={
        Object {
          "bananas": "color-chart-4",
          "cherries": "color-chart-2",
        }
      }
      colorOffset={0}
      data={
        Array [
          Object {
            "bananas": 2,
            "cherries": 8,
            "x": 2015-01-01T08:00:00.000Z,
          },
          Object {
            "bananas": 2,
            "cherries": 5,
            "x": 2015-03-02T08:00:00.000Z,
          },
          Object {
            "bananas": 3,
            "cherries": 5,
            "x": 2015-05-03T08:00:00.000Z,
          },
          Object {
            "bananas": 5,
            "cherries": 6,
            "x": 2015-07-04T08:00:00.000Z,
          },
        ]
      }
      isStacked={false}
      palette={
        Array [
          "color-chart-0",
          "color-chart-1",
          "color-chart-2",
          "color-chart-3",
          "color-chart-4",
          "color-chart-5",
        ]
      }
      xField="x"
      xScale={[Function]}
      yFields={
        Array [
          "bananas",
        ]
      }
      yScale={[Function]}
      yStackedMax={5}
    />
  </g>
  <g
    transform="translate(80, 10)"
  >
    <Points
      colorMap={
        Object {
          "bananas": "color-chart-4",
          "cherries": "color-chart-2",
        }
      }
      colorOffset={0}
      data={
        Array [
          Object {
            "bananas": 2,
            "cherries": 8,
            "x": 2015-01-01T08:00:00.000Z,
          },
          Object {
            "bananas": 2,
            "cherries": 5,
            "x": 2015-03-02T08:00:00.000Z,
          },
          Object {
            "bananas": 3,
            "cherries": 5,
            "x": 2015-05-03T08:00:00.000Z,
          },
          Object {
            "bananas": 5,
            "cherries": 6,
            "x": 2015-07-04T08:00:00.000Z,
          },
        ]
      }
      hasStroke={true}
      isStacked={false}
      palette={
        Array [
          "color-chart-0",
          "color-chart-1",
          "color-chart-2",
          "color-chart-3",
          "color-chart-4",
          "color-chart-5",
        ]
      }
      xField="x"
      xScale={[Function]}
      yFields={
        Array [
          "bananas",
        ]
      }
      yScale={[Function]}
      yStackedMax={5}
    />
  </g>
  <g
    transform="translate(80, 10)"
  >
    <Lines
      colorMap={
        Object {
          "bananas": "color-chart-4",
          "cherries": "color-chart-2",
        }
      }
      colorOffset={2}
      data={
        Array [
          Object {
            "bananas": 2,
            "cherries": 8,
            "x": 2015-01-01T08:00:00.000Z,
          },
          Object {
            "bananas": 2,
            "cherries": 5,
            "x": 2015-03-02T08:00:00.000Z,
          },
          Object {
            "bananas": 3,
            "cherries": 5,
            "x": 2015-05-03T08:00:00.000Z,
          },
          Object {
            "bananas": 5,
            "cherries": 6,
            "x": 2015-07-04T08:00:00.000Z,
          },
        ]
      }
      isStacked={false}
      palette={
        Array [
          "color-chart-0",
          "color-chart-1",
          "color-chart-2",
          "color-chart-3",
          "color-chart-4",
          "color-chart-5",
        ]
      }
      xField="x"
      xScale={[Function]}
      yFields={
        Array [
          "cherries",
        ]
      }
      yScale={[Function]}
      yStackedMax={8}
    />
  </g>
  <g
    transform="translate(80, 10)"
  >
    <Points
      colorMap={
        Object {
          "bananas": "color-chart-4",
          "cherries": "color-chart-2",
        }
      }
      colorOffset={2}
      data={
        Array [
          Object {
            "bananas": 2,
            "cherries": 8,
            "x": 2015-01-01T08:00:00.000Z,
          },
          Object {
            "bananas": 2,
            "cherries": 5,
            "x": 2015-03-02T08:00:00.000Z,
          },
          Object {
            "bananas": 3,
            "cherries": 5,
            "x": 2015-05-03T08:00:00.000Z,
          },
          Object {
            "bananas": 5,
            "cherries": 6,
            "x": 2015-07-04T08:00:00.000Z,
          },
        ]
      }
      hasStroke={true}
      isStacked={false}
      palette={
        Array [
          "color-chart-0",
          "color-chart-1",
          "color-chart-2",
          "color-chart-3",
          "color-chart-4",
          "color-chart-5",
        ]
      }
      xField="x"
      xScale={[Function]}
      yFields={
        Array [
          "cherries",
        ]
      }
      yScale={[Function]}
      yStackedMax={8}
    />
  </g>
  <g
    transform="translate(80, 10)"
  >
    <rect
      className="lucid-LineChart-invisible"
      height={325}
      onMouseMove={[Function]}
      onMouseOut={[Function]}
      width={840}
    />
  </g>
</svg>
`;

exports[`LineChart [common] example testing should match snapshot(s) for 07.all-the-things 1`] = `
<svg
  className="lucid-LineChart"
  height={400}
  width={1000}
>
  <g
    transform="translate(80, 10)"
  />
  <g
    transform="translate(80, 335)"
  >
    <Axis
      innerTickSize={6}
      orient="bottom"
      outerTickSize={0}
      scale={[Function]}
      textOrientation="horizontal"
      tickCount={5}
      tickFormat={[Function]}
      tickPadding={3}
    />
  </g>
  <g
    transform="translate(80, 335)"
  >
    <AxisLabel
      color="#000"
      height={65}
      label="Date"
      orient="bottom"
      width={840}
    />
  </g>
  <g
    transform="translate(80, 10)"
  >
    <Axis
      innerTickSize={6}
      orient="left"
      outerTickSize={6}
      scale={[Function]}
      textOrientation="horizontal"
      tickCount={5}
      tickFormat={[Function]}
      tickPadding={3}
    />
  </g>
  <g
    transform="translate(0, 10)"
  >
    <AxisLabel
      color="color-chart-0"
      height={325}
      label="Number of Blueberries"
      orient="left"
      width={80}
    />
  </g>
  <g
    transform="translate(920, 10)"
  >
    <Axis
      innerTickSize={6}
      orient="right"
      outerTickSize={6}
      scale={[Function]}
      textOrientation="horizontal"
      tickCount={5}
      tickFormat={[Function]}
      tickPadding={3}
    />
  </g>
  <g
    transform="translate(920, 10)"
  >
    <AxisLabel
      color="color-chart-1"
      height={325}
      label="Number of Oranges"
      orient="right"
      width={80}
    />
  </g>
  <g
    transform="translate(80, 10)"
  >
    <Lines
      colorMap={
        Object {
          "blueberries": "color-chart-0",
          "oranges": "color-chart-1",
        }
      }
      colorOffset={0}
      data={
        Array [
          Object {
            "blueberries": 2000,
            "date": 2015-01-01T08:00:00.000Z,
            "oranges": 3000,
          },
          Object {
            "blueberries": 2000,
            "date": 2015-01-02T08:00:00.000Z,
            "oranges": 5000,
          },
          Object {
            "blueberries": 3000,
            "date": 2015-01-03T08:00:00.000Z,
            "oranges": 2000,
          },
          Object {
            "blueberries": 5000,
            "date": 2015-01-04T08:00:00.000Z,
          },
          Object {
            "blueberries": 2500,
            "date": 2015-01-05T08:00:00.000Z,
            "oranges": 6300,
          },
          Object {
            "blueberries": 1500,
            "date": 2015-01-06T08:00:00.000Z,
            "oranges": 6100,
          },
        ]
      }
      isStacked={false}
      palette={
        Array [
          "color-chart-0",
          "color-chart-1",
          "color-chart-2",
          "color-chart-3",
          "color-chart-4",
          "color-chart-5",
        ]
      }
      xField="date"
      xScale={[Function]}
      yFields={
        Array [
          "blueberries",
        ]
      }
      yScale={[Function]}
      yStackedMax={5000}
    />
  </g>
  <g
    transform="translate(80, 10)"
  >
    <Points
      colorMap={
        Object {
          "blueberries": "color-chart-0",
          "oranges": "color-chart-1",
        }
      }
      colorOffset={0}
      data={
        Array [
          Object {
            "blueberries": 2000,
            "date": 2015-01-01T08:00:00.000Z,
            "oranges": 3000,
          },
          Object {
            "blueberries": 2000,
            "date": 2015-01-02T08:00:00.000Z,
            "oranges": 5000,
          },
          Object {
            "blueberries": 3000,
            "date": 2015-01-03T08:00:00.000Z,
            "oranges": 2000,
          },
          Object {
            "blueberries": 5000,
            "date": 2015-01-04T08:00:00.000Z,
          },
          Object {
            "blueberries": 2500,
            "date": 2015-01-05T08:00:00.000Z,
            "oranges": 6300,
          },
          Object {
            "blueberries": 1500,
            "date": 2015-01-06T08:00:00.000Z,
            "oranges": 6100,
          },
        ]
      }
      hasStroke={true}
      isStacked={false}
      palette={
        Array [
          "color-chart-0",
          "color-chart-1",
          "color-chart-2",
          "color-chart-3",
          "color-chart-4",
          "color-chart-5",
        ]
      }
      xField="date"
      xScale={[Function]}
      yFields={
        Array [
          "blueberries",
        ]
      }
      yScale={[Function]}
      yStackedMax={5000}
    />
  </g>
  <g
    transform="translate(80, 10)"
  >
    <Lines
      colorMap={
        Object {
          "blueberries": "color-chart-0",
          "oranges": "color-chart-1",
        }
      }
      colorOffset={2}
      data={
        Array [
          Object {
            "blueberries": 2000,
            "date": 2015-01-01T08:00:00.000Z,
            "oranges": 3000,
          },
          Object {
            "blueberries": 2000,
            "date": 2015-01-02T08:00:00.000Z,
            "oranges": 5000,
          },
          Object {
            "blueberries": 3000,
            "date": 2015-01-03T08:00:00.000Z,
            "oranges": 2000,
          },
          Object {
            "blueberries": 5000,
            "date": 2015-01-04T08:00:00.000Z,
          },
          Object {
            "blueberries": 2500,
            "date": 2015-01-05T08:00:00.000Z,
            "oranges": 6300,
          },
          Object {
            "blueberries": 1500,
            "date": 2015-01-06T08:00:00.000Z,
            "oranges": 6100,
          },
        ]
      }
      isStacked={false}
      palette={
        Array [
          "color-chart-0",
          "color-chart-1",
          "color-chart-2",
          "color-chart-3",
          "color-chart-4",
          "color-chart-5",
        ]
      }
      xField="date"
      xScale={[Function]}
      yFields={
        Array [
          "oranges",
        ]
      }
      yScale={[Function]}
      yStackedMax={6300}
    />
  </g>
  <g
    transform="translate(80, 10)"
  >
    <rect
      className="lucid-LineChart-invisible"
      height={325}
      onMouseMove={[Function]}
      onMouseOut={[Function]}
      width={840}
    />
  </g>
</svg>
`;

exports[`LineChart [common] example testing should match snapshot(s) for 08.stacked-single-series-with-formatters 1`] = `
<svg
  className="lucid-LineChart"
  height={400}
  width={1000}
>
  <g
    transform="translate(80, 10)"
  />
  <g
    transform="translate(80, 335)"
  >
    <Axis
      innerTickSize={6}
      orient="bottom"
      outerTickSize={0}
      scale={[Function]}
      textOrientation="horizontal"
      tickCount={null}
      tickFormat={[Function]}
      tickPadding={3}
    />
  </g>
  <g
    transform="translate(80, 10)"
  >
    <Axis
      innerTickSize={6}
      orient="left"
      outerTickSize={6}
      scale={[Function]}
      textOrientation="horizontal"
      tickCount={null}
      tickFormat={[Function]}
      tickPadding={3}
    />
  </g>
  <g
    transform="translate(80, 10)"
  >
    <Lines
      colorOffset={0}
      data={
        Array [
          Object {
            "x": 2015-01-01T08:00:00.000Z,
            "y": 1.55,
          },
          Object {
            "x": 2015-01-02T08:00:00.000Z,
            "y": 2.67,
          },
          Object {
            "x": 2015-01-03T08:00:00.000Z,
            "y": 3.31,
          },
          Object {
            "x": 2015-01-04T08:00:00.000Z,
            "y": 5.99,
          },
        ]
      }
      isStacked={true}
      palette={
        Array [
          "color-chart-0",
          "color-chart-1",
          "color-chart-2",
          "color-chart-3",
          "color-chart-4",
          "color-chart-5",
        ]
      }
      xField="x"
      xScale={[Function]}
      yFields={
        Array [
          "y",
        ]
      }
      yScale={[Function]}
      yStackedMax={5.99}
    />
  </g>
  <g
    transform="translate(80, 10)"
  >
    <Points
      colorOffset={0}
      data={
        Array [
          Object {
            "x": 2015-01-01T08:00:00.000Z,
            "y": 1.55,
          },
          Object {
            "x": 2015-01-02T08:00:00.000Z,
            "y": 2.67,
          },
          Object {
            "x": 2015-01-03T08:00:00.000Z,
            "y": 3.31,
          },
          Object {
            "x": 2015-01-04T08:00:00.000Z,
            "y": 5.99,
          },
        ]
      }
      hasStroke={true}
      isStacked={true}
      palette={
        Array [
          "color-chart-0",
          "color-chart-1",
          "color-chart-2",
          "color-chart-3",
          "color-chart-4",
          "color-chart-5",
        ]
      }
      xField="x"
      xScale={[Function]}
      yFields={
        Array [
          "y",
        ]
      }
      yScale={[Function]}
      yStackedMax={5.99}
    />
  </g>
  <g
    transform="translate(80, 10)"
  >
    <rect
      className="lucid-LineChart-invisible"
      height={325}
      onMouseMove={[Function]}
      onMouseOut={[Function]}
      width={840}
    />
  </g>
</svg>
`;

exports[`LineChart [common] example testing should match snapshot(s) for 09.stacked-monochrome-no-shapes 1`] = `
<svg
  className="lucid-LineChart"
  height={400}
  width={1000}
>
  <g
    transform="translate(80, 10)"
  />
  <g
    transform="translate(80, 335)"
  >
    <Axis
      innerTickSize={6}
      orient="bottom"
      outerTickSize={0}
      scale={[Function]}
      textOrientation="horizontal"
      tickCount={null}
      tickFormat={[Function]}
      tickPadding={3}
    />
  </g>
  <g
    transform="translate(80, 10)"
  >
    <Axis
      innerTickSize={6}
      orient="left"
      outerTickSize={6}
      scale={[Function]}
      textOrientation="horizontal"
      tickCount={null}
      tickFormat={[Function]}
      tickPadding={3}
    />
  </g>
  <g
    transform="translate(0, 10)"
  >
    <AxisLabel
      color="#000"
      height={325}
      label="Fruit Count"
      orient="left"
      width={80}
    />
  </g>
  <g
    transform="translate(80, 10)"
  >
    <Lines
      colorOffset={0}
      data={
        Array [
          Object {
            "apples": 2,
            "bananas": 7,
            "kiwis": 5,
            "oranges": 3,
            "pears": 1,
            "x": 2015-01-01T08:00:00.000Z,
          },
          Object {
            "apples": 2,
            "bananas": 7,
            "kiwis": 5,
            "oranges": 5,
            "pears": 6,
            "x": 2015-01-02T08:00:00.000Z,
          },
          Object {
            "apples": 3,
            "bananas": 7,
            "kiwis": 5,
            "oranges": 2,
            "pears": 4,
            "x": 2015-01-03T08:00:00.000Z,
          },
          Object {
            "apples": 5,
            "bananas": 7,
            "kiwis": 5,
            "oranges": 6,
            "pears": 1,
            "x": 2015-01-04T08:00:00.000Z,
          },
          Object {
            "apples": 4,
            "bananas": 7,
            "kiwis": 5,
            "oranges": 3,
            "pears": 2,
            "x": 2015-01-05T08:00:00.000Z,
          },
          Object {
            "apples": 3,
            "bananas": 7,
            "kiwis": 5,
            "oranges": 4,
            "pears": 4,
            "x": 2015-01-06T08:00:00.000Z,
          },
        ]
      }
      isStacked={true}
      palette={
        Array [
          "color-chart-0-lightest",
          "color-chart-0-light",
          "color-chart-0",
          "color-chart-0-dark",
          "color-chart-0-darkest",
        ]
      }
      xField="x"
      xScale={[Function]}
      yFields={
        Array [
          "apples",
          "oranges",
          "pears",
          "bananas",
          "kiwis",
        ]
      }
      yScale={[Function]}
      yStackedMax={25}
    />
  </g>
  <g
    transform="translate(80, 10)"
  >
    <rect
      className="lucid-LineChart-invisible"
      height={325}
      onMouseMove={[Function]}
      onMouseOut={[Function]}
      width={840}
    />
  </g>
</svg>
`;

exports[`LineChart [common] example testing should match snapshot(s) for 10.abbreviated-numbers 1`] = `
<svg
  className="lucid-LineChart"
  height={400}
  width={1000}
>
  <g
    transform="translate(80, 10)"
  />
  <g
    transform="translate(80, 335)"
  >
    <Axis
      innerTickSize={6}
      orient="bottom"
      outerTickSize={0}
      scale={[Function]}
      textOrientation="horizontal"
      tickCount={null}
      tickFormat={[Function]}
      tickPadding={3}
    />
  </g>
  <g
    transform="translate(80, 10)"
  >
    <Axis
      innerTickSize={6}
      orient="left"
      outerTickSize={6}
      scale={[Function]}
      textOrientation="horizontal"
      tickCount={null}
      tickFormat={[Function]}
      tickPadding={3}
    />
  </g>
  <g
    transform="translate(80, 10)"
  >
    <Lines
      colorOffset={0}
      data={
        Array [
          Object {
            "blueberries": 1030872156,
            "x": 2015-01-07T08:00:00.000Z,
          },
          Object {
            "blueberries": 4002156,
            "x": 2015-01-08T08:00:00.000Z,
          },
          Object {
            "blueberries": 214872156,
            "x": 2015-01-09T08:00:00.000Z,
          },
          Object {
            "blueberries": 42872156,
            "x": 2015-01-10T08:00:00.000Z,
          },
          Object {
            "blueberries": 4230872156,
            "x": 2015-01-11T08:00:00.000Z,
          },
        ]
      }
      isStacked={false}
      palette={
        Array [
          "color-chart-0",
          "color-chart-1",
          "color-chart-2",
          "color-chart-3",
          "color-chart-4",
          "color-chart-5",
        ]
      }
      xField="x"
      xScale={[Function]}
      yFields={
        Array [
          "blueberries",
        ]
      }
      yScale={[Function]}
      yStackedMax={4230872156}
    />
  </g>
  <g
    transform="translate(80, 10)"
  >
    <Points
      colorOffset={0}
      data={
        Array [
          Object {
            "blueberries": 1030872156,
            "x": 2015-01-07T08:00:00.000Z,
          },
          Object {
            "blueberries": 4002156,
            "x": 2015-01-08T08:00:00.000Z,
          },
          Object {
            "blueberries": 214872156,
            "x": 2015-01-09T08:00:00.000Z,
          },
          Object {
            "blueberries": 42872156,
            "x": 2015-01-10T08:00:00.000Z,
          },
          Object {
            "blueberries": 4230872156,
            "x": 2015-01-11T08:00:00.000Z,
          },
        ]
      }
      hasStroke={true}
      isStacked={false}
      palette={
        Array [
          "color-chart-0",
          "color-chart-1",
          "color-chart-2",
          "color-chart-3",
          "color-chart-4",
          "color-chart-5",
        ]
      }
      xField="x"
      xScale={[Function]}
      yFields={
        Array [
          "blueberries",
        ]
      }
      yScale={[Function]}
      yStackedMax={4230872156}
    />
  </g>
  <g
    transform="translate(80, 10)"
  >
    <rect
      className="lucid-LineChart-invisible"
      height={325}
      onMouseMove={[Function]}
      onMouseOut={[Function]}
      width={840}
    />
  </g>
</svg>
`;

exports[`LineChart [common] example testing should match snapshot(s) for 11.color-offset 1`] = `
<svg
  className="lucid-LineChart"
  height={400}
  width={1000}
>
  <g
    transform="translate(80, 10)"
  />
  <g
    transform="translate(80, 335)"
  >
    <Axis
      innerTickSize={6}
      orient="bottom"
      outerTickSize={0}
      scale={[Function]}
      textOrientation="horizontal"
      tickCount={null}
      tickFormat={[Function]}
      tickPadding={3}
    />
    <ContextMenu
      alignment="center"
      direction="down"
      directonOffset={-46.5}
      getAlignmentOffset={[Function]}
      isExpanded={true}
      minWidthOffset={0}
      onClickOut={null}
      portalId={null}
    >
      <ContextMenu.Target
        elementType="g"
      >
        <rect
          className="lucid-LineChart-invisible"
          height={65}
          width={840}
        />
      </ContextMenu.Target>
      <ContextMenu.FlyOut
        className="lucid-LineChart-legend-container"
      >
        <Legend
          hasBorders={true}
          isReversed={false}
          orient="horizontal"
        >
          <Legend.Item
            color="color-chart-3"
            hasLine={true}
            hasPoint={true}
            key="0"
            pointKind={3}
          >
            apples
          </Legend.Item>
          <Legend.Item
            color="color-chart-5"
            hasLine={true}
            hasPoint={true}
            key="0"
            pointKind={5}
          >
            pears
          </Legend.Item>
        </Legend>
      </ContextMenu.FlyOut>
    </ContextMenu>
  </g>
  <g
    transform="translate(80, 10)"
  >
    <Axis
      innerTickSize={6}
      orient="left"
      outerTickSize={6}
      scale={[Function]}
      textOrientation="horizontal"
      tickCount={null}
      tickFormat={[Function]}
      tickPadding={3}
    />
  </g>
  <g
    transform="translate(920, 10)"
  >
    <Axis
      innerTickSize={6}
      orient="right"
      outerTickSize={6}
      scale={[Function]}
      textOrientation="horizontal"
      tickCount={null}
      tickFormat={[Function]}
      tickPadding={3}
    />
  </g>
  <g
    transform="translate(80, 10)"
  >
    <Lines
      colorOffset={3}
      data={
        Array [
          Object {
            "apples": 184,
            "pears": 117,
            "x": 2015-01-01T08:00:00.000Z,
          },
          Object {
            "apples": 191,
            "pears": 118,
            "x": 2015-01-02T08:00:00.000Z,
          },
          Object {
            "apples": 114,
            "pears": 103,
            "x": 2015-01-03T08:00:00.000Z,
          },
          Object {
            "apples": 24,
            "pears": 85,
            "x": 2015-01-04T08:00:00.000Z,
          },
          Object {
            "apples": 4,
            "pears": 81,
            "x": 2015-01-05T08:00:00.000Z,
          },
          Object {
            "apples": 72,
            "pears": 94,
            "x": 2015-01-06T08:00:00.000Z,
          },
          Object {
            "apples": 166,
            "pears": 113,
            "x": 2015-01-07T08:00:00.000Z,
          },
          Object {
            "apples": 199,
            "pears": 120,
            "x": 2015-01-08T08:00:00.000Z,
          },
          Object {
            "apples": 141,
            "pears": 108,
            "x": 2015-01-09T08:00:00.000Z,
          },
          Object {
            "apples": 46,
            "pears": 89,
            "x": 2015-01-10T08:00:00.000Z,
          },
          Object {
            "apples": 0,
            "pears": 80,
            "x": 2015-01-11T08:00:00.000Z,
          },
          Object {
            "apples": 46,
            "pears": 89,
            "x": 2015-01-12T08:00:00.000Z,
          },
          Object {
            "apples": 142,
            "pears": 108,
            "x": 2015-01-13T08:00:00.000Z,
          },
          Object {
            "apples": 199,
            "pears": 120,
            "x": 2015-01-14T08:00:00.000Z,
          },
          Object {
            "apples": 165,
            "pears": 113,
            "x": 2015-01-15T08:00:00.000Z,
          },
        ]
      }
      isStacked={false}
      palette={
        Array [
          "color-chart-0",
          "color-chart-1",
          "color-chart-2",
          "color-chart-3",
          "color-chart-4",
          "color-chart-5",
        ]
      }
      xField="x"
      xScale={[Function]}
      yFields={
        Array [
          "apples",
        ]
      }
      yScale={[Function]}
      yStackedMax={199}
    />
  </g>
  <g
    transform="translate(80, 10)"
  >
    <Points
      colorOffset={3}
      data={
        Array [
          Object {
            "apples": 184,
            "pears": 117,
            "x": 2015-01-01T08:00:00.000Z,
          },
          Object {
            "apples": 191,
            "pears": 118,
            "x": 2015-01-02T08:00:00.000Z,
          },
          Object {
            "apples": 114,
            "pears": 103,
            "x": 2015-01-03T08:00:00.000Z,
          },
          Object {
            "apples": 24,
            "pears": 85,
            "x": 2015-01-04T08:00:00.000Z,
          },
          Object {
            "apples": 4,
            "pears": 81,
            "x": 2015-01-05T08:00:00.000Z,
          },
          Object {
            "apples": 72,
            "pears": 94,
            "x": 2015-01-06T08:00:00.000Z,
          },
          Object {
            "apples": 166,
            "pears": 113,
            "x": 2015-01-07T08:00:00.000Z,
          },
          Object {
            "apples": 199,
            "pears": 120,
            "x": 2015-01-08T08:00:00.000Z,
          },
          Object {
            "apples": 141,
            "pears": 108,
            "x": 2015-01-09T08:00:00.000Z,
          },
          Object {
            "apples": 46,
            "pears": 89,
            "x": 2015-01-10T08:00:00.000Z,
          },
          Object {
            "apples": 0,
            "pears": 80,
            "x": 2015-01-11T08:00:00.000Z,
          },
          Object {
            "apples": 46,
            "pears": 89,
            "x": 2015-01-12T08:00:00.000Z,
          },
          Object {
            "apples": 142,
            "pears": 108,
            "x": 2015-01-13T08:00:00.000Z,
          },
          Object {
            "apples": 199,
            "pears": 120,
            "x": 2015-01-14T08:00:00.000Z,
          },
          Object {
            "apples": 165,
            "pears": 113,
            "x": 2015-01-15T08:00:00.000Z,
          },
        ]
      }
      hasStroke={true}
      isStacked={false}
      palette={
        Array [
          "color-chart-0",
          "color-chart-1",
          "color-chart-2",
          "color-chart-3",
          "color-chart-4",
          "color-chart-5",
        ]
      }
      xField="x"
      xScale={[Function]}
      yFields={
        Array [
          "apples",
        ]
      }
      yScale={[Function]}
      yStackedMax={199}
    />
  </g>
  <g
    transform="translate(80, 10)"
  >
    <Lines
      colorOffset={5}
      data={
        Array [
          Object {
            "apples": 184,
            "pears": 117,
            "x": 2015-01-01T08:00:00.000Z,
          },
          Object {
            "apples": 191,
            "pears": 118,
            "x": 2015-01-02T08:00:00.000Z,
          },
          Object {
            "apples": 114,
            "pears": 103,
            "x": 2015-01-03T08:00:00.000Z,
          },
          Object {
            "apples": 24,
            "pears": 85,
            "x": 2015-01-04T08:00:00.000Z,
          },
          Object {
            "apples": 4,
            "pears": 81,
            "x": 2015-01-05T08:00:00.000Z,
          },
          Object {
            "apples": 72,
            "pears": 94,
            "x": 2015-01-06T08:00:00.000Z,
          },
          Object {
            "apples": 166,
            "pears": 113,
            "x": 2015-01-07T08:00:00.000Z,
          },
          Object {
            "apples": 199,
            "pears": 120,
            "x": 2015-01-08T08:00:00.000Z,
          },
          Object {
            "apples": 141,
            "pears": 108,
            "x": 2015-01-09T08:00:00.000Z,
          },
          Object {
            "apples": 46,
            "pears": 89,
            "x": 2015-01-10T08:00:00.000Z,
          },
          Object {
            "apples": 0,
            "pears": 80,
            "x": 2015-01-11T08:00:00.000Z,
          },
          Object {
            "apples": 46,
            "pears": 89,
            "x": 2015-01-12T08:00:00.000Z,
          },
          Object {
            "apples": 142,
            "pears": 108,
            "x": 2015-01-13T08:00:00.000Z,
          },
          Object {
            "apples": 199,
            "pears": 120,
            "x": 2015-01-14T08:00:00.000Z,
          },
          Object {
            "apples": 165,
            "pears": 113,
            "x": 2015-01-15T08:00:00.000Z,
          },
        ]
      }
      isStacked={false}
      palette={
        Array [
          "color-chart-0",
          "color-chart-1",
          "color-chart-2",
          "color-chart-3",
          "color-chart-4",
          "color-chart-5",
        ]
      }
      xField="x"
      xScale={[Function]}
      yFields={
        Array [
          "pears",
        ]
      }
      yScale={[Function]}
      yStackedMax={120}
    />
  </g>
  <g
    transform="translate(80, 10)"
  >
    <Points
      colorOffset={5}
      data={
        Array [
          Object {
            "apples": 184,
            "pears": 117,
            "x": 2015-01-01T08:00:00.000Z,
          },
          Object {
            "apples": 191,
            "pears": 118,
            "x": 2015-01-02T08:00:00.000Z,
          },
          Object {
            "apples": 114,
            "pears": 103,
            "x": 2015-01-03T08:00:00.000Z,
          },
          Object {
            "apples": 24,
            "pears": 85,
            "x": 2015-01-04T08:00:00.000Z,
          },
          Object {
            "apples": 4,
            "pears": 81,
            "x": 2015-01-05T08:00:00.000Z,
          },
          Object {
            "apples": 72,
            "pears": 94,
            "x": 2015-01-06T08:00:00.000Z,
          },
          Object {
            "apples": 166,
            "pears": 113,
            "x": 2015-01-07T08:00:00.000Z,
          },
          Object {
            "apples": 199,
            "pears": 120,
            "x": 2015-01-08T08:00:00.000Z,
          },
          Object {
            "apples": 141,
            "pears": 108,
            "x": 2015-01-09T08:00:00.000Z,
          },
          Object {
            "apples": 46,
            "pears": 89,
            "x": 2015-01-10T08:00:00.000Z,
          },
          Object {
            "apples": 0,
            "pears": 80,
            "x": 2015-01-11T08:00:00.000Z,
          },
          Object {
            "apples": 46,
            "pears": 89,
            "x": 2015-01-12T08:00:00.000Z,
          },
          Object {
            "apples": 142,
            "pears": 108,
            "x": 2015-01-13T08:00:00.000Z,
          },
          Object {
            "apples": 199,
            "pears": 120,
            "x": 2015-01-14T08:00:00.000Z,
          },
          Object {
            "apples": 165,
            "pears": 113,
            "x": 2015-01-15T08:00:00.000Z,
          },
        ]
      }
      hasStroke={true}
      isStacked={false}
      palette={
        Array [
          "color-chart-0",
          "color-chart-1",
          "color-chart-2",
          "color-chart-3",
          "color-chart-4",
          "color-chart-5",
        ]
      }
      xField="x"
      xScale={[Function]}
      yFields={
        Array [
          "pears",
        ]
      }
      yScale={[Function]}
      yStackedMax={120}
    />
  </g>
  <g
    transform="translate(80, 10)"
  >
    <rect
      className="lucid-LineChart-invisible"
      height={325}
      onMouseMove={[Function]}
      onMouseOut={[Function]}
      width={840}
    />
  </g>
</svg>
`;

exports[`LineChart [common] example testing should match snapshot(s) for 12.empty 1`] = `
<EmptyStateWrapper
  Title="You have no data."
  isEmpty={true}
>
  <svg
    className="lucid-LineChart"
    height={400}
    width={1000}
  >
    <g
      transform="translate(80, 10)"
    >
      <Axis
        innerTickSize={6}
        orient="left"
        outerTickSize={6}
        scale={[Function]}
        textOrientation="horizontal"
        tickCount={null}
        tickPadding={3}
      />
    </g>
    <g
      transform="translate(80, 335)"
    >
      <Axis
        innerTickSize={6}
        orient="bottom"
        outerTickSize={6}
        scale={[Function]}
        textOrientation="horizontal"
        tickCount={null}
        tickFormat={[Function]}
        tickPadding={3}
      />
    </g>
  </svg>
</EmptyStateWrapper>
`;

exports[`LineChart [common] example testing should match snapshot(s) for 13.empty-with-custom-title-and-body 1`] = `
<EmptyStateWrapper
  isEmpty={true}
>
  <EmptyStateWrapper.Title>
    Something went wrong.
  </EmptyStateWrapper.Title>
  <EmptyStateWrapper.Body
    style={
      Object {
        "fontSize": "12px",
      }
    }
  >
    Echo park poutine esse tempor squid do. Lo-fi ramps XOXO chicharrones laboris, portland fugiat locavore. Fap four dollar toast keytar, cronut kogi fingerstache distillery microdosing everyday carry austin DIY dreamcatcher. Distillery flexitarian meditation laboris roof party. Cred raclette gastropub tilde PBR&B. Shoreditch poke adipisicing, reprehenderit lumbersexual succulents mustache officia franzen vinyl nostrud af. Hashtag bitters organic, before they sold out butcher cronut sapiente.
  </EmptyStateWrapper.Body>
  <svg
    className="lucid-LineChart"
    height={400}
    width={1000}
  >
    <g
      transform="translate(80, 10)"
    >
      <Axis
        innerTickSize={6}
        orient="left"
        outerTickSize={6}
        scale={[Function]}
        textOrientation="horizontal"
        tickCount={null}
        tickPadding={3}
      />
    </g>
    <g
      transform="translate(80, 335)"
    >
      <Axis
        innerTickSize={6}
        orient="bottom"
        outerTickSize={6}
        scale={[Function]}
        textOrientation="horizontal"
        tickCount={null}
        tickFormat={[Function]}
        tickPadding={3}
      />
    </g>
  </svg>
</EmptyStateWrapper>
`;

exports[`LineChart [common] example testing should match snapshot(s) for 14.empty-with-button 1`] = `
<EmptyStateWrapper
  isEmpty={true}
>
  <EmptyStateWrapper.Title>
    Something went wrong.
  </EmptyStateWrapper.Title>
  <EmptyStateWrapper.Body
    style={
      Object {
        "fontSize": "12px",
      }
    }
  >
    <Button
      hasOnlyIcon={false}
      isActive={false}
      isDisabled={false}
      onClick={[Function]}
      type="button"
    >
      Action
    </Button>
  </EmptyStateWrapper.Body>
  <svg
    className="lucid-LineChart"
    height={400}
    width={1000}
  >
    <g
      transform="translate(80, 10)"
    >
      <Axis
        innerTickSize={6}
        orient="left"
        outerTickSize={6}
        scale={[Function]}
        textOrientation="horizontal"
        tickCount={null}
        tickPadding={3}
      />
    </g>
    <g
      transform="translate(80, 335)"
    >
      <Axis
        innerTickSize={6}
        orient="bottom"
        outerTickSize={6}
        scale={[Function]}
        textOrientation="horizontal"
        tickCount={null}
        tickFormat={[Function]}
        tickPadding={3}
      />
    </g>
  </svg>
</EmptyStateWrapper>
`;

exports[`LineChart [common] example testing should match snapshot(s) for 15.loading 1`] = `
<EmptyStateWrapper
  Title="You have no data."
  isEmpty={true}
  isLoading={true}
>
  <svg
    className="lucid-LineChart"
    height={400}
    width={1000}
  >
    <g
      transform="translate(80, 10)"
    >
      <Axis
        innerTickSize={6}
        orient="left"
        outerTickSize={6}
        scale={[Function]}
        textOrientation="horizontal"
        tickCount={null}
        tickPadding={3}
      />
    </g>
    <g
      transform="translate(80, 335)"
    >
      <Axis
        innerTickSize={6}
        orient="bottom"
        outerTickSize={6}
        scale={[Function]}
        textOrientation="horizontal"
        tickCount={null}
        tickFormat={[Function]}
        tickPadding={3}
      />
    </g>
  </svg>
</EmptyStateWrapper>
`;

exports[`LineChart [common] example testing should match snapshot(s) for 16.fine-grained-ticks 1`] = `
<svg
  className="lucid-LineChart"
  height={400}
  width={1000}
>
  <g
    transform="translate(80, 10)"
  />
  <g
    transform="translate(80, 335)"
  >
    <Axis
      innerTickSize={6}
      orient="bottom"
      outerTickSize={0}
      scale={[Function]}
      textOrientation="horizontal"
      tickCount={null}
      tickFormat={[Function]}
      tickPadding={3}
      ticks={
        Array [
          2018-01-01T08:00:00.000Z,
          2018-01-02T08:00:00.000Z,
          2018-01-03T08:00:00.000Z,
        ]
      }
    />
  </g>
  <g
    transform="translate(80, 10)"
  >
    <Axis
      innerTickSize={6}
      orient="left"
      outerTickSize={6}
      scale={[Function]}
      textOrientation="horizontal"
      tickCount={null}
      tickFormat={[Function]}
      tickPadding={3}
    />
  </g>
  <g
    transform="translate(80, 10)"
  >
    <Lines
      colorOffset={0}
      data={
        Array [
          Object {
            "x": 2018-01-01T08:00:00.000Z,
            "y": 1,
          },
          Object {
            "x": 2018-01-02T08:00:00.000Z,
            "y": 2,
          },
          Object {
            "x": 2018-01-03T08:00:00.000Z,
            "y": 3,
          },
        ]
      }
      isStacked={false}
      palette={
        Array [
          "color-chart-0",
          "color-chart-1",
          "color-chart-2",
          "color-chart-3",
          "color-chart-4",
          "color-chart-5",
        ]
      }
      xField="x"
      xScale={[Function]}
      yFields={
        Array [
          "y",
        ]
      }
      yScale={[Function]}
      yStackedMax={3}
    />
  </g>
  <g
    transform="translate(80, 10)"
  >
    <Points
      colorOffset={0}
      data={
        Array [
          Object {
            "x": 2018-01-01T08:00:00.000Z,
            "y": 1,
          },
          Object {
            "x": 2018-01-02T08:00:00.000Z,
            "y": 2,
          },
          Object {
            "x": 2018-01-03T08:00:00.000Z,
            "y": 3,
          },
        ]
      }
      hasStroke={true}
      isStacked={false}
      palette={
        Array [
          "color-chart-0",
          "color-chart-1",
          "color-chart-2",
          "color-chart-3",
          "color-chart-4",
          "color-chart-5",
        ]
      }
      xField="x"
      xScale={[Function]}
      yFields={
        Array [
          "y",
        ]
      }
      yScale={[Function]}
      yStackedMax={3}
    />
  </g>
  <g
    transform="translate(80, 10)"
  >
    <rect
      className="lucid-LineChart-invisible"
      height={325}
      onMouseMove={[Function]}
      onMouseOut={[Function]}
      width={840}
    />
  </g>
</svg>
`;
