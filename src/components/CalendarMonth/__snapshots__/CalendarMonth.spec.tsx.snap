// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`CalendarMonth common tests [common] example testing should match snapshot(s) for 1.selected-day 1`] = `
<DayPicker
  canChangeMonth={false}
  captionElement={
    <Caption
      classNames={
        Object {
          "body": "DayPicker-Body",
          "caption": "DayPicker-Caption",
          "container": "DayPicker",
          "day": "DayPicker-Day",
          "disabled": "disabled",
          "footer": "DayPicker-Footer",
          "interactionDisabled": "DayPicker--interactionDisabled",
          "month": "DayPicker-Month",
          "navBar": "DayPicker-NavBar",
          "navButtonInteractionDisabled": "DayPicker-NavButton--interactionDisabled",
          "navButtonNext": "DayPicker-NavButton DayPicker-NavButton--next",
          "navButtonPrev": "DayPicker-NavButton DayPicker-NavButton--prev",
          "outside": "outside",
          "selected": "selected",
          "today": "today",
          "todayButton": "DayPicker-TodayButton",
          "week": "DayPicker-Week",
          "weekNumber": "DayPicker-WeekNumber",
          "weekday": "DayPicker-Weekday",
          "weekdays": "DayPicker-Weekdays",
          "weekdaysRow": "DayPicker-WeekdaysRow",
          "wrapper": "DayPicker-wrapper",
        }
      }
    />
  }
  className="lucid-CalendarMonth"
  classNames={
    Object {
      "body": "DayPicker-Body",
      "caption": "DayPicker-Caption",
      "container": "DayPicker",
      "day": "DayPicker-Day",
      "disabled": "disabled",
      "footer": "DayPicker-Footer",
      "interactionDisabled": "DayPicker--interactionDisabled",
      "month": "DayPicker-Month",
      "navBar": "DayPicker-NavBar",
      "navButtonInteractionDisabled": "DayPicker-NavButton--interactionDisabled",
      "navButtonNext": "DayPicker-NavButton DayPicker-NavButton--next",
      "navButtonPrev": "DayPicker-NavButton DayPicker-NavButton--prev",
      "outside": "outside",
      "selected": "selected",
      "today": "today",
      "todayButton": "DayPicker-TodayButton",
      "week": "DayPicker-Week",
      "weekNumber": "DayPicker-WeekNumber",
      "weekday": "DayPicker-Weekday",
      "weekdays": "DayPicker-Weekdays",
      "weekdaysRow": "DayPicker-WeekdaysRow",
      "wrapper": "DayPicker-wrapper",
    }
  }
  cursor={null}
  enableOutsideDays={false}
  fixedWeeks={false}
  from={null}
  initialMonth={2016-02-17T22:25:23.000Z}
  key="0"
  labels={
    Object {
      "nextMonth": "Next Month",
      "previousMonth": "Previous Month",
    }
  }
  locale="en"
  localeUtils={
    Object {
      "default": Object {
        "formatDay": [Function],
        "formatMonthTitle": [Function],
        "formatWeekdayLong": [Function],
        "formatWeekdayShort": [Function],
        "getFirstDayOfWeek": [Function],
        "getMonths": [Function],
      },
      "formatDay": [Function],
      "formatMonthTitle": [Function],
      "formatWeekdayLong": [Function],
      "formatWeekdayShort": [Function],
      "getFirstDayOfWeek": [Function],
      "getMonths": [Function],
    }
  }
  modifiers={
    Object {
      "from": [Function],
      "range": [Function],
      "to": [Function],
    }
  }
  navbarElement={
    <Navbar
      classNames={
        Object {
          "body": "DayPicker-Body",
          "caption": "DayPicker-Caption",
          "container": "DayPicker",
          "day": "DayPicker-Day",
          "disabled": "disabled",
          "footer": "DayPicker-Footer",
          "interactionDisabled": "DayPicker--interactionDisabled",
          "month": "DayPicker-Month",
          "navBar": "DayPicker-NavBar",
          "navButtonInteractionDisabled": "DayPicker-NavButton--interactionDisabled",
          "navButtonNext": "DayPicker-NavButton DayPicker-NavButton--next",
          "navButtonPrev": "DayPicker-NavButton DayPicker-NavButton--prev",
          "outside": "outside",
          "selected": "selected",
          "today": "today",
          "todayButton": "DayPicker-TodayButton",
          "week": "DayPicker-Week",
          "weekNumber": "DayPicker-WeekNumber",
          "weekday": "DayPicker-Weekday",
          "weekdays": "DayPicker-Weekdays",
          "weekdaysRow": "DayPicker-WeekdaysRow",
          "wrapper": "DayPicker-wrapper",
        }
      }
      dir="ltr"
      labels={
        Object {
          "nextMonth": "Next Month",
          "previousMonth": "Previous Month",
        }
      }
      showNextButton={true}
      showPreviousButton={true}
    />
  }
  numberOfMonths={1}
  pagedNavigation={false}
  renderDay={[Function]}
  reverseMonths={false}
  selectMode="day"
  selectedDays={2016-02-17T22:25:23.000Z}
  shouldComponentUpdate={true}
  showWeekNumbers={false}
  tabIndex={0}
  to={null}
  weekdayElement={<Weekday />}
  weekdaysShort={
    Array [
      "Sun",
      "Mon",
      "Tue",
      "Wed",
      "Thu",
      "Fri",
      "Sat",
    ]
  }
/>
`;

exports[`CalendarMonth common tests [common] example testing should match snapshot(s) for 2.disabled-days 1`] = `
<DayPicker
  canChangeMonth={false}
  captionElement={
    <Caption
      classNames={
        Object {
          "body": "DayPicker-Body",
          "caption": "DayPicker-Caption",
          "container": "DayPicker",
          "day": "DayPicker-Day",
          "disabled": "disabled",
          "footer": "DayPicker-Footer",
          "interactionDisabled": "DayPicker--interactionDisabled",
          "month": "DayPicker-Month",
          "navBar": "DayPicker-NavBar",
          "navButtonInteractionDisabled": "DayPicker-NavButton--interactionDisabled",
          "navButtonNext": "DayPicker-NavButton DayPicker-NavButton--next",
          "navButtonPrev": "DayPicker-NavButton DayPicker-NavButton--prev",
          "outside": "outside",
          "selected": "selected",
          "today": "today",
          "todayButton": "DayPicker-TodayButton",
          "week": "DayPicker-Week",
          "weekNumber": "DayPicker-WeekNumber",
          "weekday": "DayPicker-Weekday",
          "weekdays": "DayPicker-Weekdays",
          "weekdaysRow": "DayPicker-WeekdaysRow",
          "wrapper": "DayPicker-wrapper",
        }
      }
    />
  }
  className="lucid-CalendarMonth"
  classNames={
    Object {
      "body": "DayPicker-Body",
      "caption": "DayPicker-Caption",
      "container": "DayPicker",
      "day": "DayPicker-Day",
      "disabled": "disabled",
      "footer": "DayPicker-Footer",
      "interactionDisabled": "DayPicker--interactionDisabled",
      "month": "DayPicker-Month",
      "navBar": "DayPicker-NavBar",
      "navButtonInteractionDisabled": "DayPicker-NavButton--interactionDisabled",
      "navButtonNext": "DayPicker-NavButton DayPicker-NavButton--next",
      "navButtonPrev": "DayPicker-NavButton DayPicker-NavButton--prev",
      "outside": "outside",
      "selected": "selected",
      "today": "today",
      "todayButton": "DayPicker-TodayButton",
      "week": "DayPicker-Week",
      "weekNumber": "DayPicker-WeekNumber",
      "weekday": "DayPicker-Weekday",
      "weekdays": "DayPicker-Weekdays",
      "weekdaysRow": "DayPicker-WeekdaysRow",
      "wrapper": "DayPicker-wrapper",
    }
  }
  cursor={null}
  disabledDays={[Function]}
  enableOutsideDays={false}
  fixedWeeks={false}
  from={null}
  initialMonth={2016-02-17T22:25:23.000Z}
  key="0"
  labels={
    Object {
      "nextMonth": "Next Month",
      "previousMonth": "Previous Month",
    }
  }
  locale="en"
  localeUtils={
    Object {
      "default": Object {
        "formatDay": [Function],
        "formatMonthTitle": [Function],
        "formatWeekdayLong": [Function],
        "formatWeekdayShort": [Function],
        "getFirstDayOfWeek": [Function],
        "getMonths": [Function],
      },
      "formatDay": [Function],
      "formatMonthTitle": [Function],
      "formatWeekdayLong": [Function],
      "formatWeekdayShort": [Function],
      "getFirstDayOfWeek": [Function],
      "getMonths": [Function],
    }
  }
  modifiers={
    Object {
      "from": [Function],
      "range": [Function],
      "to": [Function],
    }
  }
  navbarElement={
    <Navbar
      classNames={
        Object {
          "body": "DayPicker-Body",
          "caption": "DayPicker-Caption",
          "container": "DayPicker",
          "day": "DayPicker-Day",
          "disabled": "disabled",
          "footer": "DayPicker-Footer",
          "interactionDisabled": "DayPicker--interactionDisabled",
          "month": "DayPicker-Month",
          "navBar": "DayPicker-NavBar",
          "navButtonInteractionDisabled": "DayPicker-NavButton--interactionDisabled",
          "navButtonNext": "DayPicker-NavButton DayPicker-NavButton--next",
          "navButtonPrev": "DayPicker-NavButton DayPicker-NavButton--prev",
          "outside": "outside",
          "selected": "selected",
          "today": "today",
          "todayButton": "DayPicker-TodayButton",
          "week": "DayPicker-Week",
          "weekNumber": "DayPicker-WeekNumber",
          "weekday": "DayPicker-Weekday",
          "weekdays": "DayPicker-Weekdays",
          "weekdaysRow": "DayPicker-WeekdaysRow",
          "wrapper": "DayPicker-wrapper",
        }
      }
      dir="ltr"
      labels={
        Object {
          "nextMonth": "Next Month",
          "previousMonth": "Previous Month",
        }
      }
      showNextButton={true}
      showPreviousButton={true}
    />
  }
  numberOfMonths={1}
  pagedNavigation={false}
  renderDay={[Function]}
  reverseMonths={false}
  selectMode="day"
  shouldComponentUpdate={true}
  showWeekNumbers={false}
  tabIndex={0}
  to={null}
  weekdayElement={<Weekday />}
  weekdaysShort={
    Array [
      "Sun",
      "Mon",
      "Tue",
      "Wed",
      "Thu",
      "Fri",
      "Sat",
    ]
  }
/>
`;

exports[`CalendarMonth common tests [common] example testing should match snapshot(s) for 3.custom-daypicker-modifiers 1`] = `
<DayPicker
  canChangeMonth={false}
  captionElement={
    <Caption
      classNames={
        Object {
          "body": "DayPicker-Body",
          "caption": "DayPicker-Caption",
          "container": "DayPicker",
          "day": "DayPicker-Day",
          "disabled": "disabled",
          "footer": "DayPicker-Footer",
          "interactionDisabled": "DayPicker--interactionDisabled",
          "month": "DayPicker-Month",
          "navBar": "DayPicker-NavBar",
          "navButtonInteractionDisabled": "DayPicker-NavButton--interactionDisabled",
          "navButtonNext": "DayPicker-NavButton DayPicker-NavButton--next",
          "navButtonPrev": "DayPicker-NavButton DayPicker-NavButton--prev",
          "outside": "outside",
          "selected": "selected",
          "today": "today",
          "todayButton": "DayPicker-TodayButton",
          "week": "DayPicker-Week",
          "weekNumber": "DayPicker-WeekNumber",
          "weekday": "DayPicker-Weekday",
          "weekdays": "DayPicker-Weekdays",
          "weekdaysRow": "DayPicker-WeekdaysRow",
          "wrapper": "DayPicker-wrapper",
        }
      }
    />
  }
  className="lucid-CalendarMonth"
  classNames={
    Object {
      "body": "DayPicker-Body",
      "caption": "DayPicker-Caption",
      "container": "DayPicker",
      "day": "DayPicker-Day",
      "disabled": "disabled",
      "footer": "DayPicker-Footer",
      "interactionDisabled": "DayPicker--interactionDisabled",
      "month": "DayPicker-Month",
      "navBar": "DayPicker-NavBar",
      "navButtonInteractionDisabled": "DayPicker-NavButton--interactionDisabled",
      "navButtonNext": "DayPicker-NavButton DayPicker-NavButton--next",
      "navButtonPrev": "DayPicker-NavButton DayPicker-NavButton--prev",
      "outside": "outside",
      "selected": "selected",
      "today": "today",
      "todayButton": "DayPicker-TodayButton",
      "week": "DayPicker-Week",
      "weekNumber": "DayPicker-WeekNumber",
      "weekday": "DayPicker-Weekday",
      "weekdays": "DayPicker-Weekdays",
      "weekdaysRow": "DayPicker-WeekdaysRow",
      "wrapper": "DayPicker-wrapper",
    }
  }
  cursor={null}
  enableOutsideDays={false}
  fixedWeeks={false}
  from={null}
  initialMonth={2016-02-17T22:25:23.000Z}
  key="0"
  labels={
    Object {
      "nextMonth": "Next Month",
      "previousMonth": "Previous Month",
    }
  }
  locale="en"
  localeUtils={
    Object {
      "default": Object {
        "formatDay": [Function],
        "formatMonthTitle": [Function],
        "formatWeekdayLong": [Function],
        "formatWeekdayShort": [Function],
        "getFirstDayOfWeek": [Function],
        "getMonths": [Function],
      },
      "formatDay": [Function],
      "formatMonthTitle": [Function],
      "formatWeekdayLong": [Function],
      "formatWeekdayShort": [Function],
      "getFirstDayOfWeek": [Function],
      "getMonths": [Function],
    }
  }
  modifiers={
    Object {
      "from": [Function],
      "range": [Function],
      "to": [Function],
      "tuesday": [Function],
    }
  }
  navbarElement={
    <Navbar
      classNames={
        Object {
          "body": "DayPicker-Body",
          "caption": "DayPicker-Caption",
          "container": "DayPicker",
          "day": "DayPicker-Day",
          "disabled": "disabled",
          "footer": "DayPicker-Footer",
          "interactionDisabled": "DayPicker--interactionDisabled",
          "month": "DayPicker-Month",
          "navBar": "DayPicker-NavBar",
          "navButtonInteractionDisabled": "DayPicker-NavButton--interactionDisabled",
          "navButtonNext": "DayPicker-NavButton DayPicker-NavButton--next",
          "navButtonPrev": "DayPicker-NavButton DayPicker-NavButton--prev",
          "outside": "outside",
          "selected": "selected",
          "today": "today",
          "todayButton": "DayPicker-TodayButton",
          "week": "DayPicker-Week",
          "weekNumber": "DayPicker-WeekNumber",
          "weekday": "DayPicker-Weekday",
          "weekdays": "DayPicker-Weekdays",
          "weekdaysRow": "DayPicker-WeekdaysRow",
          "wrapper": "DayPicker-wrapper",
        }
      }
      dir="ltr"
      labels={
        Object {
          "nextMonth": "Next Month",
          "previousMonth": "Previous Month",
        }
      }
      showNextButton={true}
      showPreviousButton={true}
    />
  }
  numberOfMonths={1}
  pagedNavigation={false}
  renderDay={[Function]}
  reverseMonths={false}
  selectMode="day"
  shouldComponentUpdate={true}
  showWeekNumbers={false}
  tabIndex={0}
  to={null}
  weekdayElement={<Weekday />}
  weekdaysShort={
    Array [
      "Sun",
      "Mon",
      "Tue",
      "Wed",
      "Thu",
      "Fri",
      "Sat",
    ]
  }
/>
`;

exports[`CalendarMonth common tests [common] example testing should match snapshot(s) for 4.select-dates 1`] = `
<DayPicker
  canChangeMonth={false}
  captionElement={
    <Caption
      classNames={
        Object {
          "body": "DayPicker-Body",
          "caption": "DayPicker-Caption",
          "container": "DayPicker",
          "day": "DayPicker-Day",
          "disabled": "disabled",
          "footer": "DayPicker-Footer",
          "interactionDisabled": "DayPicker--interactionDisabled",
          "month": "DayPicker-Month",
          "navBar": "DayPicker-NavBar",
          "navButtonInteractionDisabled": "DayPicker-NavButton--interactionDisabled",
          "navButtonNext": "DayPicker-NavButton DayPicker-NavButton--next",
          "navButtonPrev": "DayPicker-NavButton DayPicker-NavButton--prev",
          "outside": "outside",
          "selected": "selected",
          "today": "today",
          "todayButton": "DayPicker-TodayButton",
          "week": "DayPicker-Week",
          "weekNumber": "DayPicker-WeekNumber",
          "weekday": "DayPicker-Weekday",
          "weekdays": "DayPicker-Weekdays",
          "weekdaysRow": "DayPicker-WeekdaysRow",
          "wrapper": "DayPicker-wrapper",
        }
      }
    />
  }
  className="lucid-CalendarMonth"
  classNames={
    Object {
      "body": "DayPicker-Body",
      "caption": "DayPicker-Caption",
      "container": "DayPicker",
      "day": "DayPicker-Day",
      "disabled": "disabled",
      "footer": "DayPicker-Footer",
      "interactionDisabled": "DayPicker--interactionDisabled",
      "month": "DayPicker-Month",
      "navBar": "DayPicker-NavBar",
      "navButtonInteractionDisabled": "DayPicker-NavButton--interactionDisabled",
      "navButtonNext": "DayPicker-NavButton DayPicker-NavButton--next",
      "navButtonPrev": "DayPicker-NavButton DayPicker-NavButton--prev",
      "outside": "outside",
      "selected": "selected",
      "today": "today",
      "todayButton": "DayPicker-TodayButton",
      "week": "DayPicker-Week",
      "weekNumber": "DayPicker-WeekNumber",
      "weekday": "DayPicker-Weekday",
      "weekdays": "DayPicker-Weekdays",
      "weekdaysRow": "DayPicker-WeekdaysRow",
      "wrapper": "DayPicker-wrapper",
    }
  }
  cursor={null}
  disabledDays={[Function]}
  enableOutsideDays={false}
  fixedWeeks={false}
  from={null}
  initialMonth={2016-02-17T22:25:23.000Z}
  key="0"
  labels={
    Object {
      "nextMonth": "Next Month",
      "previousMonth": "Previous Month",
    }
  }
  locale="en"
  localeUtils={
    Object {
      "default": Object {
        "formatDay": [Function],
        "formatMonthTitle": [Function],
        "formatWeekdayLong": [Function],
        "formatWeekdayShort": [Function],
        "getFirstDayOfWeek": [Function],
        "getMonths": [Function],
      },
      "formatDay": [Function],
      "formatMonthTitle": [Function],
      "formatWeekdayLong": [Function],
      "formatWeekdayShort": [Function],
      "getFirstDayOfWeek": [Function],
      "getMonths": [Function],
    }
  }
  modifiers={
    Object {
      "from": [Function],
      "range": [Function],
      "to": [Function],
    }
  }
  navbarElement={
    <Navbar
      classNames={
        Object {
          "body": "DayPicker-Body",
          "caption": "DayPicker-Caption",
          "container": "DayPicker",
          "day": "DayPicker-Day",
          "disabled": "disabled",
          "footer": "DayPicker-Footer",
          "interactionDisabled": "DayPicker--interactionDisabled",
          "month": "DayPicker-Month",
          "navBar": "DayPicker-NavBar",
          "navButtonInteractionDisabled": "DayPicker-NavButton--interactionDisabled",
          "navButtonNext": "DayPicker-NavButton DayPicker-NavButton--next",
          "navButtonPrev": "DayPicker-NavButton DayPicker-NavButton--prev",
          "outside": "outside",
          "selected": "selected",
          "today": "today",
          "todayButton": "DayPicker-TodayButton",
          "week": "DayPicker-Week",
          "weekNumber": "DayPicker-WeekNumber",
          "weekday": "DayPicker-Weekday",
          "weekdays": "DayPicker-Weekdays",
          "weekdaysRow": "DayPicker-WeekdaysRow",
          "wrapper": "DayPicker-wrapper",
        }
      }
      dir="ltr"
      labels={
        Object {
          "nextMonth": "Next Month",
          "previousMonth": "Previous Month",
        }
      }
      showNextButton={true}
      showPreviousButton={true}
    />
  }
  numberOfMonths={1}
  onDayClick={[Function]}
  onDayMouseEnter={[Function]}
  onDayMouseLeave={[Function]}
  pagedNavigation={false}
  renderDay={[Function]}
  reverseMonths={false}
  selectMode="day"
  selectedDays={Array []}
  shouldComponentUpdate={true}
  showWeekNumbers={false}
  tabIndex={0}
  to={null}
  weekdayElement={<Weekday />}
  weekdaysShort={
    Array [
      "Sun",
      "Mon",
      "Tue",
      "Wed",
      "Thu",
      "Fri",
      "Sat",
    ]
  }
/>
`;

exports[`CalendarMonth common tests [common] example testing should match snapshot(s) for 5.select-range 1`] = `
<DayPicker
  canChangeMonth={false}
  captionElement={
    <Caption
      classNames={
        Object {
          "body": "DayPicker-Body",
          "caption": "DayPicker-Caption",
          "container": "DayPicker",
          "day": "DayPicker-Day",
          "disabled": "disabled",
          "footer": "DayPicker-Footer",
          "interactionDisabled": "DayPicker--interactionDisabled",
          "month": "DayPicker-Month",
          "navBar": "DayPicker-NavBar",
          "navButtonInteractionDisabled": "DayPicker-NavButton--interactionDisabled",
          "navButtonNext": "DayPicker-NavButton DayPicker-NavButton--next",
          "navButtonPrev": "DayPicker-NavButton DayPicker-NavButton--prev",
          "outside": "outside",
          "selected": "selected",
          "today": "today",
          "todayButton": "DayPicker-TodayButton",
          "week": "DayPicker-Week",
          "weekNumber": "DayPicker-WeekNumber",
          "weekday": "DayPicker-Weekday",
          "weekdays": "DayPicker-Weekdays",
          "weekdaysRow": "DayPicker-WeekdaysRow",
          "wrapper": "DayPicker-wrapper",
        }
      }
    />
  }
  className="lucid-CalendarMonth"
  classNames={
    Object {
      "body": "DayPicker-Body",
      "caption": "DayPicker-Caption",
      "container": "DayPicker",
      "day": "DayPicker-Day",
      "disabled": "disabled",
      "footer": "DayPicker-Footer",
      "interactionDisabled": "DayPicker--interactionDisabled",
      "month": "DayPicker-Month",
      "navBar": "DayPicker-NavBar",
      "navButtonInteractionDisabled": "DayPicker-NavButton--interactionDisabled",
      "navButtonNext": "DayPicker-NavButton DayPicker-NavButton--next",
      "navButtonPrev": "DayPicker-NavButton DayPicker-NavButton--prev",
      "outside": "outside",
      "selected": "selected",
      "today": "today",
      "todayButton": "DayPicker-TodayButton",
      "week": "DayPicker-Week",
      "weekNumber": "DayPicker-WeekNumber",
      "weekday": "DayPicker-Weekday",
      "weekdays": "DayPicker-Weekdays",
      "weekdaysRow": "DayPicker-WeekdaysRow",
      "wrapper": "DayPicker-wrapper",
    }
  }
  cursor={null}
  disabledDays={[Function]}
  enableOutsideDays={false}
  fixedWeeks={false}
  from={null}
  initialMonth={2016-02-17T22:25:23.000Z}
  key="0"
  labels={
    Object {
      "nextMonth": "Next Month",
      "previousMonth": "Previous Month",
    }
  }
  locale="en"
  localeUtils={
    Object {
      "default": Object {
        "formatDay": [Function],
        "formatMonthTitle": [Function],
        "formatWeekdayLong": [Function],
        "formatWeekdayShort": [Function],
        "getFirstDayOfWeek": [Function],
        "getMonths": [Function],
      },
      "formatDay": [Function],
      "formatMonthTitle": [Function],
      "formatWeekdayLong": [Function],
      "formatWeekdayShort": [Function],
      "getFirstDayOfWeek": [Function],
      "getMonths": [Function],
    }
  }
  modifiers={
    Object {
      "from": [Function],
      "range": [Function],
      "to": [Function],
    }
  }
  navbarElement={
    <Navbar
      classNames={
        Object {
          "body": "DayPicker-Body",
          "caption": "DayPicker-Caption",
          "container": "DayPicker",
          "day": "DayPicker-Day",
          "disabled": "disabled",
          "footer": "DayPicker-Footer",
          "interactionDisabled": "DayPicker--interactionDisabled",
          "month": "DayPicker-Month",
          "navBar": "DayPicker-NavBar",
          "navButtonInteractionDisabled": "DayPicker-NavButton--interactionDisabled",
          "navButtonNext": "DayPicker-NavButton DayPicker-NavButton--next",
          "navButtonPrev": "DayPicker-NavButton DayPicker-NavButton--prev",
          "outside": "outside",
          "selected": "selected",
          "today": "today",
          "todayButton": "DayPicker-TodayButton",
          "week": "DayPicker-Week",
          "weekNumber": "DayPicker-WeekNumber",
          "weekday": "DayPicker-Weekday",
          "weekdays": "DayPicker-Weekdays",
          "weekdaysRow": "DayPicker-WeekdaysRow",
          "wrapper": "DayPicker-wrapper",
        }
      }
      dir="ltr"
      labels={
        Object {
          "nextMonth": "Next Month",
          "previousMonth": "Previous Month",
        }
      }
      showNextButton={true}
      showPreviousButton={true}
    />
  }
  numberOfMonths={1}
  onDayClick={[Function]}
  onDayMouseEnter={[Function]}
  onDayMouseLeave={[Function]}
  pagedNavigation={false}
  renderDay={[Function]}
  reverseMonths={false}
  selectMode="from"
  shouldComponentUpdate={true}
  showWeekNumbers={false}
  tabIndex={0}
  to={null}
  weekdayElement={<Weekday />}
  weekdaysShort={
    Array [
      "Sun",
      "Mon",
      "Tue",
      "Wed",
      "Thu",
      "Fri",
      "Sat",
    ]
  }
/>
`;

exports[`CalendarMonth common tests [common] example testing should match snapshot(s) for 5.select-range 2`] = `
<DayPicker
  canChangeMonth={false}
  captionElement={
    <Caption
      classNames={
        Object {
          "body": "DayPicker-Body",
          "caption": "DayPicker-Caption",
          "container": "DayPicker",
          "day": "DayPicker-Day",
          "disabled": "disabled",
          "footer": "DayPicker-Footer",
          "interactionDisabled": "DayPicker--interactionDisabled",
          "month": "DayPicker-Month",
          "navBar": "DayPicker-NavBar",
          "navButtonInteractionDisabled": "DayPicker-NavButton--interactionDisabled",
          "navButtonNext": "DayPicker-NavButton DayPicker-NavButton--next",
          "navButtonPrev": "DayPicker-NavButton DayPicker-NavButton--prev",
          "outside": "outside",
          "selected": "selected",
          "today": "today",
          "todayButton": "DayPicker-TodayButton",
          "week": "DayPicker-Week",
          "weekNumber": "DayPicker-WeekNumber",
          "weekday": "DayPicker-Weekday",
          "weekdays": "DayPicker-Weekdays",
          "weekdaysRow": "DayPicker-WeekdaysRow",
          "wrapper": "DayPicker-wrapper",
        }
      }
    />
  }
  className="lucid-CalendarMonth"
  classNames={
    Object {
      "body": "DayPicker-Body",
      "caption": "DayPicker-Caption",
      "container": "DayPicker",
      "day": "DayPicker-Day",
      "disabled": "disabled",
      "footer": "DayPicker-Footer",
      "interactionDisabled": "DayPicker--interactionDisabled",
      "month": "DayPicker-Month",
      "navBar": "DayPicker-NavBar",
      "navButtonInteractionDisabled": "DayPicker-NavButton--interactionDisabled",
      "navButtonNext": "DayPicker-NavButton DayPicker-NavButton--next",
      "navButtonPrev": "DayPicker-NavButton DayPicker-NavButton--prev",
      "outside": "outside",
      "selected": "selected",
      "today": "today",
      "todayButton": "DayPicker-TodayButton",
      "week": "DayPicker-Week",
      "weekNumber": "DayPicker-WeekNumber",
      "weekday": "DayPicker-Weekday",
      "weekdays": "DayPicker-Weekdays",
      "weekdaysRow": "DayPicker-WeekdaysRow",
      "wrapper": "DayPicker-wrapper",
    }
  }
  cursor={null}
  disabledDays={[Function]}
  enableOutsideDays={false}
  fixedWeeks={false}
  from={null}
  initialMonth={2016-02-17T22:25:23.000Z}
  key="1"
  labels={
    Object {
      "nextMonth": "Next Month",
      "previousMonth": "Previous Month",
    }
  }
  locale="en"
  localeUtils={
    Object {
      "default": Object {
        "formatDay": [Function],
        "formatMonthTitle": [Function],
        "formatWeekdayLong": [Function],
        "formatWeekdayShort": [Function],
        "getFirstDayOfWeek": [Function],
        "getMonths": [Function],
      },
      "formatDay": [Function],
      "formatMonthTitle": [Function],
      "formatWeekdayLong": [Function],
      "formatWeekdayShort": [Function],
      "getFirstDayOfWeek": [Function],
      "getMonths": [Function],
    }
  }
  modifiers={
    Object {
      "from": [Function],
      "range": [Function],
      "to": [Function],
    }
  }
  navbarElement={
    <Navbar
      classNames={
        Object {
          "body": "DayPicker-Body",
          "caption": "DayPicker-Caption",
          "container": "DayPicker",
          "day": "DayPicker-Day",
          "disabled": "disabled",
          "footer": "DayPicker-Footer",
          "interactionDisabled": "DayPicker--interactionDisabled",
          "month": "DayPicker-Month",
          "navBar": "DayPicker-NavBar",
          "navButtonInteractionDisabled": "DayPicker-NavButton--interactionDisabled",
          "navButtonNext": "DayPicker-NavButton DayPicker-NavButton--next",
          "navButtonPrev": "DayPicker-NavButton DayPicker-NavButton--prev",
          "outside": "outside",
          "selected": "selected",
          "today": "today",
          "todayButton": "DayPicker-TodayButton",
          "week": "DayPicker-Week",
          "weekNumber": "DayPicker-WeekNumber",
          "weekday": "DayPicker-Weekday",
          "weekdays": "DayPicker-Weekdays",
          "weekdaysRow": "DayPicker-WeekdaysRow",
          "wrapper": "DayPicker-wrapper",
        }
      }
      dir="ltr"
      labels={
        Object {
          "nextMonth": "Next Month",
          "previousMonth": "Previous Month",
        }
      }
      showNextButton={true}
      showPreviousButton={true}
    />
  }
  numberOfMonths={1}
  onDayClick={[Function]}
  onDayMouseEnter={[Function]}
  onDayMouseLeave={[Function]}
  pagedNavigation={false}
  renderDay={[Function]}
  reverseMonths={false}
  selectMode="from"
  shouldComponentUpdate={true}
  showWeekNumbers={false}
  tabIndex={0}
  to={null}
  weekdayElement={<Weekday />}
  weekdaysShort={
    Array [
      "Sun",
      "Mon",
      "Tue",
      "Wed",
      "Thu",
      "Fri",
      "Sat",
    ]
  }
/>
`;

exports[`CalendarMonth common tests [common] example testing should match snapshot(s) for 6.show-cursor 1`] = `
<DayPicker
  canChangeMonth={false}
  captionElement={
    <Caption
      classNames={
        Object {
          "body": "DayPicker-Body",
          "caption": "DayPicker-Caption",
          "container": "DayPicker",
          "day": "DayPicker-Day",
          "disabled": "disabled",
          "footer": "DayPicker-Footer",
          "interactionDisabled": "DayPicker--interactionDisabled",
          "month": "DayPicker-Month",
          "navBar": "DayPicker-NavBar",
          "navButtonInteractionDisabled": "DayPicker-NavButton--interactionDisabled",
          "navButtonNext": "DayPicker-NavButton DayPicker-NavButton--next",
          "navButtonPrev": "DayPicker-NavButton DayPicker-NavButton--prev",
          "outside": "outside",
          "selected": "selected",
          "today": "today",
          "todayButton": "DayPicker-TodayButton",
          "week": "DayPicker-Week",
          "weekNumber": "DayPicker-WeekNumber",
          "weekday": "DayPicker-Weekday",
          "weekdays": "DayPicker-Weekdays",
          "weekdaysRow": "DayPicker-WeekdaysRow",
          "wrapper": "DayPicker-wrapper",
        }
      }
    />
  }
  className="lucid-CalendarMonth"
  classNames={
    Object {
      "body": "DayPicker-Body",
      "caption": "DayPicker-Caption",
      "container": "DayPicker",
      "day": "DayPicker-Day",
      "disabled": "disabled",
      "footer": "DayPicker-Footer",
      "interactionDisabled": "DayPicker--interactionDisabled",
      "month": "DayPicker-Month",
      "navBar": "DayPicker-NavBar",
      "navButtonInteractionDisabled": "DayPicker-NavButton--interactionDisabled",
      "navButtonNext": "DayPicker-NavButton DayPicker-NavButton--next",
      "navButtonPrev": "DayPicker-NavButton DayPicker-NavButton--prev",
      "outside": "outside",
      "selected": "selected",
      "today": "today",
      "todayButton": "DayPicker-TodayButton",
      "week": "DayPicker-Week",
      "weekNumber": "DayPicker-WeekNumber",
      "weekday": "DayPicker-Weekday",
      "weekdays": "DayPicker-Weekdays",
      "weekdaysRow": "DayPicker-WeekdaysRow",
      "wrapper": "DayPicker-wrapper",
    }
  }
  cursor={2016-02-17T22:25:23.000Z}
  enableOutsideDays={false}
  fixedWeeks={false}
  from={null}
  initialMonth={2016-02-17T22:25:23.000Z}
  key="0"
  labels={
    Object {
      "nextMonth": "Next Month",
      "previousMonth": "Previous Month",
    }
  }
  locale="en"
  localeUtils={
    Object {
      "default": Object {
        "formatDay": [Function],
        "formatMonthTitle": [Function],
        "formatWeekdayLong": [Function],
        "formatWeekdayShort": [Function],
        "getFirstDayOfWeek": [Function],
        "getMonths": [Function],
      },
      "formatDay": [Function],
      "formatMonthTitle": [Function],
      "formatWeekdayLong": [Function],
      "formatWeekdayShort": [Function],
      "getFirstDayOfWeek": [Function],
      "getMonths": [Function],
    }
  }
  modifiers={
    Object {
      "from": [Function],
      "range": [Function],
      "to": [Function],
    }
  }
  navbarElement={
    <Navbar
      classNames={
        Object {
          "body": "DayPicker-Body",
          "caption": "DayPicker-Caption",
          "container": "DayPicker",
          "day": "DayPicker-Day",
          "disabled": "disabled",
          "footer": "DayPicker-Footer",
          "interactionDisabled": "DayPicker--interactionDisabled",
          "month": "DayPicker-Month",
          "navBar": "DayPicker-NavBar",
          "navButtonInteractionDisabled": "DayPicker-NavButton--interactionDisabled",
          "navButtonNext": "DayPicker-NavButton DayPicker-NavButton--next",
          "navButtonPrev": "DayPicker-NavButton DayPicker-NavButton--prev",
          "outside": "outside",
          "selected": "selected",
          "today": "today",
          "todayButton": "DayPicker-TodayButton",
          "week": "DayPicker-Week",
          "weekNumber": "DayPicker-WeekNumber",
          "weekday": "DayPicker-Weekday",
          "weekdays": "DayPicker-Weekdays",
          "weekdaysRow": "DayPicker-WeekdaysRow",
          "wrapper": "DayPicker-wrapper",
        }
      }
      dir="ltr"
      labels={
        Object {
          "nextMonth": "Next Month",
          "previousMonth": "Previous Month",
        }
      }
      showNextButton={true}
      showPreviousButton={true}
    />
  }
  numberOfMonths={1}
  pagedNavigation={false}
  renderDay={[Function]}
  reverseMonths={false}
  selectMode="day"
  shouldComponentUpdate={true}
  showWeekNumbers={false}
  tabIndex={0}
  to={null}
  weekdayElement={<Weekday />}
  weekdaysShort={
    Array [
      "Sun",
      "Mon",
      "Tue",
      "Wed",
      "Thu",
      "Fri",
      "Sat",
    ]
  }
/>
`;

exports[`CalendarMonth common tests [common] example testing should match snapshot(s) for 6.show-cursor 2`] = `
<DayPicker
  canChangeMonth={false}
  captionElement={
    <Caption
      classNames={
        Object {
          "body": "DayPicker-Body",
          "caption": "DayPicker-Caption",
          "container": "DayPicker",
          "day": "DayPicker-Day",
          "disabled": "disabled",
          "footer": "DayPicker-Footer",
          "interactionDisabled": "DayPicker--interactionDisabled",
          "month": "DayPicker-Month",
          "navBar": "DayPicker-NavBar",
          "navButtonInteractionDisabled": "DayPicker-NavButton--interactionDisabled",
          "navButtonNext": "DayPicker-NavButton DayPicker-NavButton--next",
          "navButtonPrev": "DayPicker-NavButton DayPicker-NavButton--prev",
          "outside": "outside",
          "selected": "selected",
          "today": "today",
          "todayButton": "DayPicker-TodayButton",
          "week": "DayPicker-Week",
          "weekNumber": "DayPicker-WeekNumber",
          "weekday": "DayPicker-Weekday",
          "weekdays": "DayPicker-Weekdays",
          "weekdaysRow": "DayPicker-WeekdaysRow",
          "wrapper": "DayPicker-wrapper",
        }
      }
    />
  }
  className="lucid-CalendarMonth"
  classNames={
    Object {
      "body": "DayPicker-Body",
      "caption": "DayPicker-Caption",
      "container": "DayPicker",
      "day": "DayPicker-Day",
      "disabled": "disabled",
      "footer": "DayPicker-Footer",
      "interactionDisabled": "DayPicker--interactionDisabled",
      "month": "DayPicker-Month",
      "navBar": "DayPicker-NavBar",
      "navButtonInteractionDisabled": "DayPicker-NavButton--interactionDisabled",
      "navButtonNext": "DayPicker-NavButton DayPicker-NavButton--next",
      "navButtonPrev": "DayPicker-NavButton DayPicker-NavButton--prev",
      "outside": "outside",
      "selected": "selected",
      "today": "today",
      "todayButton": "DayPicker-TodayButton",
      "week": "DayPicker-Week",
      "weekNumber": "DayPicker-WeekNumber",
      "weekday": "DayPicker-Weekday",
      "weekdays": "DayPicker-Weekdays",
      "weekdaysRow": "DayPicker-WeekdaysRow",
      "wrapper": "DayPicker-wrapper",
    }
  }
  cursor={2016-02-17T22:25:23.000Z}
  enableOutsideDays={false}
  fixedWeeks={false}
  from={2016-02-01T22:25:23.000Z}
  initialMonth={2016-02-17T22:25:23.000Z}
  key="0"
  labels={
    Object {
      "nextMonth": "Next Month",
      "previousMonth": "Previous Month",
    }
  }
  locale="en"
  localeUtils={
    Object {
      "default": Object {
        "formatDay": [Function],
        "formatMonthTitle": [Function],
        "formatWeekdayLong": [Function],
        "formatWeekdayShort": [Function],
        "getFirstDayOfWeek": [Function],
        "getMonths": [Function],
      },
      "formatDay": [Function],
      "formatMonthTitle": [Function],
      "formatWeekdayLong": [Function],
      "formatWeekdayShort": [Function],
      "getFirstDayOfWeek": [Function],
      "getMonths": [Function],
    }
  }
  modifiers={
    Object {
      "from": [Function],
      "range": [Function],
      "to": [Function],
    }
  }
  navbarElement={
    <Navbar
      classNames={
        Object {
          "body": "DayPicker-Body",
          "caption": "DayPicker-Caption",
          "container": "DayPicker",
          "day": "DayPicker-Day",
          "disabled": "disabled",
          "footer": "DayPicker-Footer",
          "interactionDisabled": "DayPicker--interactionDisabled",
          "month": "DayPicker-Month",
          "navBar": "DayPicker-NavBar",
          "navButtonInteractionDisabled": "DayPicker-NavButton--interactionDisabled",
          "navButtonNext": "DayPicker-NavButton DayPicker-NavButton--next",
          "navButtonPrev": "DayPicker-NavButton DayPicker-NavButton--prev",
          "outside": "outside",
          "selected": "selected",
          "today": "today",
          "todayButton": "DayPicker-TodayButton",
          "week": "DayPicker-Week",
          "weekNumber": "DayPicker-WeekNumber",
          "weekday": "DayPicker-Weekday",
          "weekdays": "DayPicker-Weekdays",
          "weekdaysRow": "DayPicker-WeekdaysRow",
          "wrapper": "DayPicker-wrapper",
        }
      }
      dir="ltr"
      labels={
        Object {
          "nextMonth": "Next Month",
          "previousMonth": "Previous Month",
        }
      }
      showNextButton={true}
      showPreviousButton={true}
    />
  }
  numberOfMonths={1}
  pagedNavigation={false}
  renderDay={[Function]}
  reverseMonths={false}
  selectMode="to"
  shouldComponentUpdate={true}
  showWeekNumbers={false}
  tabIndex={0}
  to={null}
  weekdayElement={<Weekday />}
  weekdaysShort={
    Array [
      "Sun",
      "Mon",
      "Tue",
      "Wed",
      "Thu",
      "Fri",
      "Sat",
    ]
  }
/>
`;
