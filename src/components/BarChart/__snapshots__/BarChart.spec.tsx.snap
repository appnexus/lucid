// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`BarChart [common] example testing should match snapshot(s) for 01.basic 1`] = `
<svg
  className="lucid-BarChart"
  height={400}
  width={750}
>
  <g
    transform="translate(80, 350)"
  >
    <Axis
      innerTickSize={6}
      orient="bottom"
      outerTickSize={0}
      scale={[Function]}
      textOrientation="horizontal"
      tickCount={null}
      tickFormat={[Function]}
      tickPadding={3}
    />
  </g>
  <g
    transform="translate(80, 20)"
  >
    <Axis
      innerTickSize={6}
      orient="left"
      outerTickSize={6}
      scale={[Function]}
      textOrientation="horizontal"
      tickCount={null}
      tickFormat={[Function]}
      tickPadding={3}
    />
  </g>
  <g
    transform="translate(0, 20)"
  >
    <AxisLabel
      color="#000"
      height={330}
      label="Revenue"
      orient="left"
      width={80}
    />
  </g>
  <g
    transform="translate(80, 20)"
  >
    <Bars
      colorOffset={0}
      data={
        Array [
          Object {
            "x": "2015-01-01",
            "y": 1,
          },
          Object {
            "x": "2015-01-02",
            "y": 2,
          },
          Object {
            "x": "2015-01-03",
            "y": 3,
          },
          Object {
            "x": "2015-01-04",
            "y": 5,
          },
        ]
      }
      hasToolTips={true}
      isStacked={false}
      palette={
        Array [
          "color-chart-3",
          "color-chart-0-darkest",
          "color-chart-2",
          "color-chart-4-lightest",
          "color-chart-5",
          "color-chart-1-light",
          "color-chart-6",
        ]
      }
      renderTooltipBody={null}
      xField="x"
      xFormatter={[Function]}
      xScale={[Function]}
      yFields={
        Array [
          "y",
        ]
      }
      yFormatter={[Function]}
      yScale={[Function]}
      yStackedMax={5}
      yTooltipFormatter={[Function]}
    />
  </g>
</svg>
`;

exports[`BarChart [common] example testing should match snapshot(s) for 03.grouped 1`] = `
<svg
  className="lucid-BarChart"
  height={400}
  width={750}
>
  <g
    transform="translate(80, 350)"
  >
    <Axis
      innerTickSize={6}
      orient="bottom"
      outerTickSize={0}
      scale={[Function]}
      textOrientation="horizontal"
      tickCount={null}
      tickFormat={[Function]}
      tickPadding={3}
    />
  </g>
  <g
    transform="translate(80, 10)"
  >
    <Axis
      innerTickSize={6}
      orient="left"
      outerTickSize={6}
      scale={[Function]}
      textOrientation="horizontal"
      tickCount={null}
      tickFormat={[Function]}
      tickPadding={3}
    />
  </g>
  <g
    transform="translate(0, 10)"
  >
    <AxisLabel
      color="#000"
      height={340}
      label="Fruit Count"
      orient="left"
      width={80}
    />
  </g>
  <g
    transform="translate(80, 10)"
  >
    <Bars
      colorOffset={0}
      data={
        Array [
          Object {
            "apples": 10,
            "bananas": 15,
            "oranges": 5,
            "peaches": 35,
            "pears": 20,
            "x": "Monday",
          },
          Object {
            "apples": 20,
            "bananas": 25,
            "oranges": 27,
            "peaches": 20,
            "pears": 5,
            "x": "Tuesday",
          },
          Object {
            "apples": 5,
            "bananas": 20,
            "oranges": 35,
            "peaches": 5,
            "pears": 15,
            "x": "Wednesday",
          },
        ]
      }
      hasToolTips={true}
      isStacked={false}
      palette={
        Array [
          "color-chart-0-lightest",
          "color-chart-0-light",
          "color-chart-0",
          "color-chart-0-dark",
          "color-chart-0-darkest",
          "color-chart-1-lightest",
          "color-chart-1-light",
          "color-chart-1",
          "color-chart-1-dark",
          "color-chart-1-darkest",
          "color-chart-2-lightest",
          "color-chart-2-light",
          "color-chart-2",
          "color-chart-2-dark",
          "color-chart-2-darkest",
          "color-chart-3-lightest",
          "color-chart-3-light",
          "color-chart-3",
          "color-chart-3-dark",
          "color-chart-3-darkest",
          "color-chart-4-lightest",
          "color-chart-4-light",
          "color-chart-4",
          "color-chart-4-dark",
          "color-chart-4-darkest",
          "color-chart-5-lightest",
          "color-chart-5-light",
          "color-chart-5",
          "color-chart-5-dark",
          "color-chart-5-darkest",
        ]
      }
      renderTooltipBody={null}
      xField="x"
      xFormatter={[Function]}
      xScale={[Function]}
      yFields={
        Array [
          "apples",
          "pears",
          "peaches",
          "bananas",
          "oranges",
        ]
      }
      yFormatter={[Function]}
      yScale={[Function]}
      yStackedMax={35}
      yTooltipFormatter={[Function]}
    />
  </g>
</svg>
`;

exports[`BarChart [common] example testing should match snapshot(s) for 04.grouped-with-legend 1`] = `
<svg
  className="lucid-BarChart"
  height={400}
  width={750}
>
  <g
    transform="translate(80, 350)"
  >
    <Axis
      innerTickSize={6}
      orient="bottom"
      outerTickSize={0}
      scale={[Function]}
      textOrientation="horizontal"
      tickCount={null}
      tickFormat={[Function]}
      tickPadding={3}
    />
  </g>
  <g
    transform="translate(80, 10)"
  >
    <Axis
      innerTickSize={6}
      orient="left"
      outerTickSize={6}
      scale={[Function]}
      textOrientation="horizontal"
      tickCount={null}
      tickFormat={[Function]}
      tickPadding={3}
    />
  </g>
  <g
    transform="translate(0, 10)"
  >
    <AxisLabel
      color="#000"
      height={340}
      label="Fruit Count"
      orient="left"
      width={80}
    />
  </g>
  <g
    transform="translate(80, 10)"
  >
    <Bars
      colorOffset={0}
      data={
        Array [
          Object {
            "apples": 10,
            "bananas": 15,
            "oranges": 5,
            "peaches": 35,
            "pears": 20,
            "x": "Monday",
          },
          Object {
            "apples": 20,
            "bananas": 25,
            "oranges": 27,
            "peaches": 20,
            "pears": 5,
            "x": "Tuesday",
          },
          Object {
            "apples": 5,
            "bananas": 20,
            "oranges": 35,
            "peaches": 5,
            "pears": 15,
            "x": "Wednesday",
          },
        ]
      }
      hasToolTips={true}
      isStacked={false}
      palette={
        Array [
          "color-chart-3",
          "color-chart-0-darkest",
          "color-chart-2",
          "color-chart-4-lightest",
          "color-chart-5",
          "color-chart-1-light",
          "color-chart-6",
        ]
      }
      renderTooltipBody={null}
      xField="x"
      xFormatter={[Function]}
      xScale={[Function]}
      yFields={
        Array [
          "apples",
          "pears",
          "peaches",
          "bananas",
          "oranges",
        ]
      }
      yFormatter={[Function]}
      yScale={[Function]}
      yStackedMax={35}
      yTooltipFormatter={[Function]}
    />
  </g>
</svg>
`;

exports[`BarChart [common] example testing should match snapshot(s) for 05.limited-ticks 1`] = `
<svg
  className="lucid-BarChart"
  height={400}
  width={750}
>
  <g
    transform="translate(80, 350)"
  >
    <Axis
      innerTickSize={6}
      orient="bottom"
      outerTickSize={0}
      scale={[Function]}
      textOrientation="horizontal"
      tickCount={5}
      tickFormat={[Function]}
      tickPadding={3}
    />
  </g>
  <g
    transform="translate(80, 10)"
  >
    <Axis
      innerTickSize={6}
      orient="left"
      outerTickSize={6}
      scale={[Function]}
      textOrientation="horizontal"
      tickCount={4}
      tickFormat={[Function]}
      tickPadding={3}
    />
  </g>
  <g
    transform="translate(80, 10)"
  >
    <Bars
      colorOffset={0}
      data={
        Array [
          Object {
            "x": "2015-01-01",
            "y": 1,
          },
          Object {
            "x": "2015-01-02",
            "y": 2,
          },
          Object {
            "x": "2015-01-03",
            "y": 3,
          },
          Object {
            "x": "2015-01-04",
            "y": 5,
          },
          Object {
            "x": "2015-01-05",
            "y": 2,
          },
          Object {
            "x": "2015-01-06",
            "y": 3,
          },
          Object {
            "x": "2015-01-07",
            "y": 2,
          },
          Object {
            "x": "2015-01-08",
            "y": 2,
          },
          Object {
            "x": "2015-01-09",
            "y": 5,
          },
          Object {
            "x": "2015-01-10",
            "y": 3,
          },
          Object {
            "x": "2015-01-11",
            "y": 4,
          },
          Object {
            "x": "2015-01-12",
            "y": 4,
          },
          Object {
            "x": "2015-01-13",
            "y": 5,
          },
          Object {
            "x": "2015-01-14",
            "y": 3,
          },
          Object {
            "x": "2015-01-15",
            "y": 4,
          },
          Object {
            "x": "2015-01-16",
            "y": 3,
          },
          Object {
            "x": "2015-01-17",
            "y": 6,
          },
        ]
      }
      hasToolTips={true}
      isStacked={false}
      palette={
        Array [
          "color-chart-3",
          "color-chart-0-darkest",
          "color-chart-2",
          "color-chart-4-lightest",
          "color-chart-5",
          "color-chart-1-light",
          "color-chart-6",
        ]
      }
      renderTooltipBody={null}
      xField="x"
      xFormatter={[Function]}
      xScale={[Function]}
      yFields={
        Array [
          "y",
        ]
      }
      yFormatter={[Function]}
      yScale={[Function]}
      yStackedMax={6}
      yTooltipFormatter={[Function]}
    />
  </g>
</svg>
`;

exports[`BarChart [common] example testing should match snapshot(s) for 06.all-the-things 1`] = `
<svg
  className="lucid-BarChart"
  height={400}
  width={750}
>
  <g
    transform="translate(80, 350)"
  >
    <Axis
      innerTickSize={6}
      orient="bottom"
      outerTickSize={0}
      scale={[Function]}
      textOrientation="horizontal"
      tickCount={5}
      tickFormat={[Function]}
      tickPadding={3}
    />
  </g>
  <g
    transform="translate(80, 350)"
  >
    <AxisLabel
      color="#000"
      height={50}
      label="Weekdays"
      orient="bottom"
      width={650}
    />
  </g>
  <g
    transform="translate(80, 10)"
  >
    <Axis
      innerTickSize={6}
      orient="left"
      outerTickSize={6}
      scale={[Function]}
      textOrientation="horizontal"
      tickCount={4}
      tickFormat={[Function]}
      tickPadding={3}
    />
  </g>
  <g
    transform="translate(0, 10)"
  >
    <AxisLabel
      color="#000"
      height={340}
      label="Fruit Count"
      orient="left"
      width={80}
    />
  </g>
  <g
    transform="translate(80, 10)"
  >
    <Bars
      colorMap={
        Object {
          "apples": "color-chart-good",
          "oranges": "color-chart-1",
        }
      }
      colorOffset={0}
      data={
        Array [
          Object {
            "apples": 2000,
            "day": "monday",
            "oranges": 3000,
          },
          Object {
            "apples": 2000,
            "day": "tuesday",
            "oranges": 5000,
          },
          Object {
            "apples": 3000,
            "day": "wednesday",
            "oranges": 2000,
          },
          Object {
            "apples": 5000,
            "day": "thursday",
            "oranges": 6000,
          },
        ]
      }
      hasToolTips={true}
      isStacked={false}
      palette={
        Array [
          "color-chart-3",
          "color-chart-0-darkest",
          "color-chart-2",
          "color-chart-4-lightest",
          "color-chart-5",
          "color-chart-1-light",
          "color-chart-6",
        ]
      }
      renderTooltipBody={null}
      xField="day"
      xFormatter={[Function]}
      xScale={[Function]}
      yFields={
        Array [
          "apples",
          "oranges",
        ]
      }
      yFormatter={[Function]}
      yScale={[Function]}
      yStackedMax={6000}
      yTooltipFormatter={[Function]}
    />
  </g>
</svg>
`;

exports[`BarChart [common] example testing should match snapshot(s) for 07.stacked 1`] = `
<svg
  className="lucid-BarChart"
  height={400}
  width={750}
>
  <g
    transform="translate(80, 350)"
  >
    <Axis
      innerTickSize={6}
      orient="bottom"
      outerTickSize={0}
      scale={[Function]}
      textOrientation="horizontal"
      tickCount={null}
      tickFormat={[Function]}
      tickPadding={3}
    />
  </g>
  <g
    transform="translate(80, 10)"
  >
    <Axis
      innerTickSize={6}
      orient="left"
      outerTickSize={6}
      scale={[Function]}
      textOrientation="horizontal"
      tickCount={null}
      tickFormat={[Function]}
      tickPadding={3}
    />
  </g>
  <g
    transform="translate(0, 10)"
  >
    <AxisLabel
      color="#000"
      height={340}
      label="Fruit Count"
      orient="left"
      width={80}
    />
  </g>
  <g
    transform="translate(80, 10)"
  >
    <Bars
      colorOffset={0}
      data={
        Array [
          Object {
            "apples": 10,
            "peaches": 35,
            "pears": 20,
            "x": "Monday",
          },
          Object {
            "apples": 20,
            "peaches": 20,
            "pears": 5,
            "x": "Tuesday",
          },
          Object {
            "apples": 5,
            "peaches": 5,
            "pears": 15,
            "x": "Wednesday",
          },
        ]
      }
      hasToolTips={true}
      isStacked={true}
      palette={
        Array [
          "color-chart-3",
          "color-chart-0-darkest",
          "color-chart-2",
          "color-chart-4-lightest",
          "color-chart-5",
          "color-chart-1-light",
          "color-chart-6",
        ]
      }
      renderTooltipBody={null}
      xField="x"
      xFormatter={[Function]}
      xScale={[Function]}
      yFields={
        Array [
          "apples",
          "pears",
          "peaches",
        ]
      }
      yFormatter={[Function]}
      yScale={[Function]}
      yStackedMax={65}
      yTooltipFormatter={[Function]}
    />
  </g>
</svg>
`;

exports[`BarChart [common] example testing should match snapshot(s) for 08.unformatted-tooltips 1`] = `
<svg
  className="lucid-BarChart"
  height={400}
  width={750}
>
  <g
    transform="translate(80, 350)"
  >
    <Axis
      innerTickSize={6}
      orient="bottom"
      outerTickSize={0}
      scale={[Function]}
      textOrientation="horizontal"
      tickCount={null}
      tickFormat={[Function]}
      tickPadding={3}
    />
  </g>
  <g
    transform="translate(80, 10)"
  >
    <Axis
      innerTickSize={6}
      orient="left"
      outerTickSize={6}
      scale={[Function]}
      textOrientation="horizontal"
      tickCount={null}
      tickFormat={[Function]}
      tickPadding={3}
    />
  </g>
  <g
    transform="translate(0, 10)"
  >
    <AxisLabel
      color="#000"
      height={340}
      label="Revenue"
      orient="left"
      width={80}
    />
  </g>
  <g
    transform="translate(80, 10)"
  >
    <Bars
      colorOffset={0}
      data={
        Array [
          Object {
            "x": "2015-01-01",
            "y": 1200,
          },
          Object {
            "x": "2015-01-02",
            "y": 900,
          },
          Object {
            "x": "2015-01-03",
            "y": 1800,
          },
          Object {
            "x": "2015-01-04",
            "y": 3000,
          },
        ]
      }
      hasToolTips={true}
      isStacked={false}
      palette={
        Array [
          "color-chart-3",
          "color-chart-0-darkest",
          "color-chart-2",
          "color-chart-4-lightest",
          "color-chart-5",
          "color-chart-1-light",
          "color-chart-6",
        ]
      }
      renderTooltipBody={null}
      xField="x"
      xFormatter={[Function]}
      xScale={[Function]}
      yFields={
        Array [
          "y",
        ]
      }
      yFormatter={[Function]}
      yScale={[Function]}
      yStackedMax={3000}
      yTooltipFormatter={[Function]}
    />
  </g>
</svg>
`;

exports[`BarChart [common] example testing should match snapshot(s) for 09.formatted-tooltip-values 1`] = `
<svg
  className="lucid-BarChart"
  height={400}
  width={750}
>
  <g
    transform="translate(80, 350)"
  >
    <Axis
      innerTickSize={6}
      orient="bottom"
      outerTickSize={0}
      scale={[Function]}
      textOrientation="horizontal"
      tickCount={null}
      tickFormat={[Function]}
      tickPadding={3}
    />
  </g>
  <g
    transform="translate(80, 10)"
  >
    <Axis
      innerTickSize={6}
      orient="left"
      outerTickSize={6}
      scale={[Function]}
      textOrientation="horizontal"
      tickCount={null}
      tickFormat={[Function]}
      tickPadding={3}
    />
  </g>
  <g
    transform="translate(0, 10)"
  >
    <AxisLabel
      color="#000"
      height={340}
      label="Revenue"
      orient="left"
      width={80}
    />
  </g>
  <g
    transform="translate(80, 10)"
  >
    <Bars
      colorOffset={0}
      data={
        Array [
          Object {
            "x": "2015-01-01",
            "y": 1200,
          },
          Object {
            "x": "2015-01-02",
            "y": 900,
          },
          Object {
            "x": "2015-01-03",
            "y": 1800,
          },
          Object {
            "x": "2015-01-04",
            "y": 3000,
          },
        ]
      }
      hasToolTips={true}
      isStacked={false}
      palette={
        Array [
          "color-chart-3",
          "color-chart-0-darkest",
          "color-chart-2",
          "color-chart-4-lightest",
          "color-chart-5",
          "color-chart-1-light",
          "color-chart-6",
        ]
      }
      renderTooltipBody={null}
      xField="x"
      xFormatter={[Function]}
      xScale={[Function]}
      yFields={
        Array [
          "y",
        ]
      }
      yFormatter={[Function]}
      yScale={[Function]}
      yStackedMax={3000}
      yTooltipFormatter={[Function]}
    />
  </g>
</svg>
`;

exports[`BarChart [common] example testing should match snapshot(s) for 10.formatted-tooltips 1`] = `
<svg
  className="lucid-BarChart"
  height={400}
  width={750}
>
  <g
    transform="translate(80, 350)"
  >
    <Axis
      innerTickSize={6}
      orient="bottom"
      outerTickSize={0}
      scale={[Function]}
      textOrientation="horizontal"
      tickCount={null}
      tickFormat={[Function]}
      tickPadding={3}
    />
  </g>
  <g
    transform="translate(80, 10)"
  >
    <Axis
      innerTickSize={6}
      orient="left"
      outerTickSize={6}
      scale={[Function]}
      textOrientation="horizontal"
      tickCount={null}
      tickFormat={[Function]}
      tickPadding={3}
    />
  </g>
  <g
    transform="translate(0, 10)"
  >
    <AxisLabel
      color="#000"
      height={340}
      label="Revenue"
      orient="left"
      width={80}
    />
  </g>
  <g
    transform="translate(80, 10)"
  >
    <Bars
      colorOffset={0}
      data={
        Array [
          Object {
            "x": "2015-01-01",
            "y": 1200,
          },
          Object {
            "x": "2015-01-02",
            "y": 900,
          },
          Object {
            "x": "2015-01-03",
            "y": 1800,
          },
          Object {
            "x": "2015-01-04",
            "y": 3000,
          },
        ]
      }
      hasToolTips={true}
      isStacked={false}
      palette={
        Array [
          "color-chart-3",
          "color-chart-0-darkest",
          "color-chart-2",
          "color-chart-4-lightest",
          "color-chart-5",
          "color-chart-1-light",
          "color-chart-6",
        ]
      }
      renderTooltipBody={[Function]}
      xField="x"
      xFormatter={[Function]}
      xScale={[Function]}
      yFields={
        Array [
          "y",
        ]
      }
      yFormatter={[Function]}
      yScale={[Function]}
      yStackedMax={3000}
      yTooltipFormatter={[Function]}
    />
  </g>
</svg>
`;

exports[`BarChart [common] example testing should match snapshot(s) for 11.empty 1`] = `
<EmptyStateWrapper
  Title="You have no data."
  anchorMessage={false}
  isEmpty={true}
  isLoading={false}
>
  <svg
    className="lucid-BarChart"
    height={400}
    width={750}
  >
    <g
      transform="translate(80, 350)"
    >
      <Axis
        innerTickSize={6}
        orient="bottom"
        outerTickSize={6}
        scale={[Function]}
        textOrientation="horizontal"
        tickCount={null}
        tickPadding={3}
      />
    </g>
    <g
      transform="translate(80, 10)"
    >
      <Axis
        innerTickSize={6}
        orient="left"
        outerTickSize={6}
        scale={[Function]}
        textOrientation="horizontal"
        tickCount={null}
        tickFormat={[Function]}
        tickPadding={3}
      />
    </g>
  </svg>
</EmptyStateWrapper>
`;

exports[`BarChart [common] example testing should match snapshot(s) for 12.empty-with-custom-title-and-body 1`] = `
<EmptyStateWrapper
  anchorMessage={false}
  isEmpty={true}
  isLoading={false}
>
  <EmptyStateWrapper.Title>
    Something went wrong.
  </EmptyStateWrapper.Title>
  <EmptyStateWrapper.Body
    style={
      Object {
        "fontSize": "12px",
      }
    }
  >
    Echo park poutine esse tempor squid do. Lo-fi ramps XOXO chicharrones laboris, portland fugiat locavore. Fap four dollar toast keytar, cronut kogi fingerstache distillery microdosing everyday carry austin DIY dreamcatcher. Distillery flexitarian meditation laboris roof party. Cred raclette gastropub tilde PBR&B. Shoreditch poke adipisicing, reprehenderit lumbersexual succulents mustache officia franzen vinyl nostrud af. Hashtag bitters organic, before they sold out butcher cronut sapiente.
  </EmptyStateWrapper.Body>
  <svg
    className="lucid-BarChart"
    height={400}
    width={750}
  >
    <g
      transform="translate(80, 350)"
    >
      <Axis
        innerTickSize={6}
        orient="bottom"
        outerTickSize={6}
        scale={[Function]}
        textOrientation="horizontal"
        tickCount={null}
        tickPadding={3}
      />
    </g>
    <g
      transform="translate(80, 10)"
    >
      <Axis
        innerTickSize={6}
        orient="left"
        outerTickSize={6}
        scale={[Function]}
        textOrientation="horizontal"
        tickCount={null}
        tickFormat={[Function]}
        tickPadding={3}
      />
    </g>
  </svg>
</EmptyStateWrapper>
`;

exports[`BarChart [common] example testing should match snapshot(s) for 13.many-bars 1`] = `
<svg
  className="lucid-BarChart"
  height={600}
  width={750}
>
  <g
    transform="translate(300, 300)"
  >
    <Axis
      innerTickSize={6}
      orient="bottom"
      outerTickSize={0}
      scale={[Function]}
      textOrientation="diagonal"
      tickCount={20}
      tickFormat={[Function]}
      tickPadding={3}
    />
  </g>
  <g
    transform="translate(300, 10)"
  >
    <Axis
      innerTickSize={6}
      orient="left"
      outerTickSize={6}
      scale={[Function]}
      textOrientation="horizontal"
      tickCount={null}
      tickFormat={[Function]}
      tickPadding={3}
    />
  </g>
  <g
    transform="translate(300, 10)"
  >
    <Bars
      colorOffset={0}
      data={
        Array [
          Object {
            "x": "Thu Jan 01 1970 00:00:00 GMT+0000 (Coordinated Universal Time)0",
            "y": 0,
          },
          Object {
            "x": "Thu Jan 01 1970 00:00:00 GMT+0000 (Coordinated Universal Time)86400",
            "y": 1,
          },
          Object {
            "x": "Thu Jan 01 1970 00:00:00 GMT+0000 (Coordinated Universal Time)172800",
            "y": 2,
          },
          Object {
            "x": "Thu Jan 01 1970 00:00:00 GMT+0000 (Coordinated Universal Time)259200",
            "y": 3,
          },
          Object {
            "x": "Thu Jan 01 1970 00:00:00 GMT+0000 (Coordinated Universal Time)345600",
            "y": 4,
          },
          Object {
            "x": "Thu Jan 01 1970 00:00:00 GMT+0000 (Coordinated Universal Time)432000",
            "y": 5,
          },
          Object {
            "x": "Thu Jan 01 1970 00:00:00 GMT+0000 (Coordinated Universal Time)518400",
            "y": 6,
          },
          Object {
            "x": "Thu Jan 01 1970 00:00:00 GMT+0000 (Coordinated Universal Time)604800",
            "y": 7,
          },
          Object {
            "x": "Thu Jan 01 1970 00:00:00 GMT+0000 (Coordinated Universal Time)691200",
            "y": 8,
          },
          Object {
            "x": "Thu Jan 01 1970 00:00:00 GMT+0000 (Coordinated Universal Time)777600",
            "y": 9,
          },
          Object {
            "x": "Thu Jan 01 1970 00:00:00 GMT+0000 (Coordinated Universal Time)864000",
            "y": 10,
          },
          Object {
            "x": "Thu Jan 01 1970 00:00:00 GMT+0000 (Coordinated Universal Time)950400",
            "y": 11,
          },
          Object {
            "x": "Thu Jan 01 1970 00:00:00 GMT+0000 (Coordinated Universal Time)1036800",
            "y": 12,
          },
          Object {
            "x": "Thu Jan 01 1970 00:00:00 GMT+0000 (Coordinated Universal Time)1123200",
            "y": 13,
          },
          Object {
            "x": "Thu Jan 01 1970 00:00:00 GMT+0000 (Coordinated Universal Time)1209600",
            "y": 14,
          },
          Object {
            "x": "Thu Jan 01 1970 00:00:00 GMT+0000 (Coordinated Universal Time)1296000",
            "y": 15,
          },
          Object {
            "x": "Thu Jan 01 1970 00:00:00 GMT+0000 (Coordinated Universal Time)1382400",
            "y": 16,
          },
          Object {
            "x": "Thu Jan 01 1970 00:00:00 GMT+0000 (Coordinated Universal Time)1468800",
            "y": 17,
          },
          Object {
            "x": "Thu Jan 01 1970 00:00:00 GMT+0000 (Coordinated Universal Time)1555200",
            "y": 18,
          },
          Object {
            "x": "Thu Jan 01 1970 00:00:00 GMT+0000 (Coordinated Universal Time)1641600",
            "y": 19,
          },
          Object {
            "x": "Thu Jan 01 1970 00:00:00 GMT+0000 (Coordinated Universal Time)1728000",
            "y": 20,
          },
          Object {
            "x": "Thu Jan 01 1970 00:00:00 GMT+0000 (Coordinated Universal Time)1814400",
            "y": 21,
          },
          Object {
            "x": "Thu Jan 01 1970 00:00:00 GMT+0000 (Coordinated Universal Time)1900800",
            "y": 22,
          },
          Object {
            "x": "Thu Jan 01 1970 00:00:00 GMT+0000 (Coordinated Universal Time)1987200",
            "y": 23,
          },
          Object {
            "x": "Thu Jan 01 1970 00:00:00 GMT+0000 (Coordinated Universal Time)2073600",
            "y": 24,
          },
          Object {
            "x": "Thu Jan 01 1970 00:00:00 GMT+0000 (Coordinated Universal Time)2160000",
            "y": 25,
          },
          Object {
            "x": "Thu Jan 01 1970 00:00:00 GMT+0000 (Coordinated Universal Time)2246400",
            "y": 26,
          },
          Object {
            "x": "Thu Jan 01 1970 00:00:00 GMT+0000 (Coordinated Universal Time)2332800",
            "y": 27,
          },
          Object {
            "x": "Thu Jan 01 1970 00:00:00 GMT+0000 (Coordinated Universal Time)2419200",
            "y": 28,
          },
          Object {
            "x": "Thu Jan 01 1970 00:00:00 GMT+0000 (Coordinated Universal Time)2505600",
            "y": 29,
          },
          Object {
            "x": "Thu Jan 01 1970 00:00:00 GMT+0000 (Coordinated Universal Time)2592000",
            "y": 30,
          },
          Object {
            "x": "Thu Jan 01 1970 00:00:00 GMT+0000 (Coordinated Universal Time)2678400",
            "y": 31,
          },
          Object {
            "x": "Thu Jan 01 1970 00:00:00 GMT+0000 (Coordinated Universal Time)2764800",
            "y": 32,
          },
          Object {
            "x": "Thu Jan 01 1970 00:00:00 GMT+0000 (Coordinated Universal Time)2851200",
            "y": 33,
          },
          Object {
            "x": "Thu Jan 01 1970 00:00:00 GMT+0000 (Coordinated Universal Time)2937600",
            "y": 34,
          },
          Object {
            "x": "Thu Jan 01 1970 00:00:00 GMT+0000 (Coordinated Universal Time)3024000",
            "y": 35,
          },
          Object {
            "x": "Thu Jan 01 1970 00:00:00 GMT+0000 (Coordinated Universal Time)3110400",
            "y": 36,
          },
          Object {
            "x": "Thu Jan 01 1970 00:00:00 GMT+0000 (Coordinated Universal Time)3196800",
            "y": 37,
          },
          Object {
            "x": "Thu Jan 01 1970 00:00:00 GMT+0000 (Coordinated Universal Time)3283200",
            "y": 38,
          },
          Object {
            "x": "Thu Jan 01 1970 00:00:00 GMT+0000 (Coordinated Universal Time)3369600",
            "y": 39,
          },
          Object {
            "x": "Thu Jan 01 1970 00:00:00 GMT+0000 (Coordinated Universal Time)3456000",
            "y": 40,
          },
          Object {
            "x": "Thu Jan 01 1970 00:00:00 GMT+0000 (Coordinated Universal Time)3542400",
            "y": 41,
          },
          Object {
            "x": "Thu Jan 01 1970 00:00:00 GMT+0000 (Coordinated Universal Time)3628800",
            "y": 42,
          },
          Object {
            "x": "Thu Jan 01 1970 00:00:00 GMT+0000 (Coordinated Universal Time)3715200",
            "y": 43,
          },
          Object {
            "x": "Thu Jan 01 1970 00:00:00 GMT+0000 (Coordinated Universal Time)3801600",
            "y": 44,
          },
          Object {
            "x": "Thu Jan 01 1970 00:00:00 GMT+0000 (Coordinated Universal Time)3888000",
            "y": 45,
          },
          Object {
            "x": "Thu Jan 01 1970 00:00:00 GMT+0000 (Coordinated Universal Time)3974400",
            "y": 46,
          },
          Object {
            "x": "Thu Jan 01 1970 00:00:00 GMT+0000 (Coordinated Universal Time)4060800",
            "y": 47,
          },
          Object {
            "x": "Thu Jan 01 1970 00:00:00 GMT+0000 (Coordinated Universal Time)4147200",
            "y": 48,
          },
          Object {
            "x": "Thu Jan 01 1970 00:00:00 GMT+0000 (Coordinated Universal Time)4233600",
            "y": 49,
          },
          Object {
            "x": "Thu Jan 01 1970 00:00:00 GMT+0000 (Coordinated Universal Time)4320000",
            "y": 50,
          },
          Object {
            "x": "Thu Jan 01 1970 00:00:00 GMT+0000 (Coordinated Universal Time)4406400",
            "y": 51,
          },
          Object {
            "x": "Thu Jan 01 1970 00:00:00 GMT+0000 (Coordinated Universal Time)4492800",
            "y": 52,
          },
          Object {
            "x": "Thu Jan 01 1970 00:00:00 GMT+0000 (Coordinated Universal Time)4579200",
            "y": 53,
          },
          Object {
            "x": "Thu Jan 01 1970 00:00:00 GMT+0000 (Coordinated Universal Time)4665600",
            "y": 54,
          },
          Object {
            "x": "Thu Jan 01 1970 00:00:00 GMT+0000 (Coordinated Universal Time)4752000",
            "y": 55,
          },
          Object {
            "x": "Thu Jan 01 1970 00:00:00 GMT+0000 (Coordinated Universal Time)4838400",
            "y": 56,
          },
          Object {
            "x": "Thu Jan 01 1970 00:00:00 GMT+0000 (Coordinated Universal Time)4924800",
            "y": 57,
          },
          Object {
            "x": "Thu Jan 01 1970 00:00:00 GMT+0000 (Coordinated Universal Time)5011200",
            "y": 58,
          },
          Object {
            "x": "Thu Jan 01 1970 00:00:00 GMT+0000 (Coordinated Universal Time)5097600",
            "y": 59,
          },
          Object {
            "x": "Thu Jan 01 1970 00:00:00 GMT+0000 (Coordinated Universal Time)5184000",
            "y": 60,
          },
          Object {
            "x": "Thu Jan 01 1970 00:00:00 GMT+0000 (Coordinated Universal Time)5270400",
            "y": 61,
          },
          Object {
            "x": "Thu Jan 01 1970 00:00:00 GMT+0000 (Coordinated Universal Time)5356800",
            "y": 62,
          },
          Object {
            "x": "Thu Jan 01 1970 00:00:00 GMT+0000 (Coordinated Universal Time)5443200",
            "y": 63,
          },
          Object {
            "x": "Thu Jan 01 1970 00:00:00 GMT+0000 (Coordinated Universal Time)5529600",
            "y": 64,
          },
          Object {
            "x": "Thu Jan 01 1970 00:00:00 GMT+0000 (Coordinated Universal Time)5616000",
            "y": 65,
          },
          Object {
            "x": "Thu Jan 01 1970 00:00:00 GMT+0000 (Coordinated Universal Time)5702400",
            "y": 66,
          },
          Object {
            "x": "Thu Jan 01 1970 00:00:00 GMT+0000 (Coordinated Universal Time)5788800",
            "y": 67,
          },
          Object {
            "x": "Thu Jan 01 1970 00:00:00 GMT+0000 (Coordinated Universal Time)5875200",
            "y": 68,
          },
          Object {
            "x": "Thu Jan 01 1970 00:00:00 GMT+0000 (Coordinated Universal Time)5961600",
            "y": 69,
          },
        ]
      }
      hasToolTips={true}
      isStacked={false}
      palette={
        Array [
          "color-chart-3",
          "color-chart-0-darkest",
          "color-chart-2",
          "color-chart-4-lightest",
          "color-chart-5",
          "color-chart-1-light",
          "color-chart-6",
        ]
      }
      renderTooltipBody={null}
      xField="x"
      xFormatter={[Function]}
      xScale={[Function]}
      yFields={
        Array [
          "y",
        ]
      }
      yFormatter={[Function]}
      yScale={[Function]}
      yStackedMax={69}
      yTooltipFormatter={[Function]}
    />
  </g>
</svg>
`;
